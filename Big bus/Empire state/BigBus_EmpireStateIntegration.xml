<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="cc76c046-99c2-4291-b911-8fcf088c56ba" activeEnvironment="Default" name="BigBus_EmpireStateIntegrationProject" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" updated="2.5.0 2018-09-14T14:45:07Z" encryptionMode="Not encrypted" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:interface xsi:type="con:RestService" id="f7d7df75-5063-4a82-8492-8f5454671036" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://bb-web-api-g.eu.cloudhub.io" type="rest" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/>
    <con:endpoints>
      <con:endpoint>https://bb-web-api-d.eu.cloudhub.io</con:endpoint>
      <con:endpoint>https://bb-web-api-g.eu.cloudhub.io</con:endpoint>
    </con:endpoints>
    <con:resource name="Cancel-reservation" path="/api/1/reservations/${#Project#reservationReference}/cancel" id="7ca9c52a-a1e3-4f86-8dba-9d691e10facd">
      <con:settings/>
      <con:parameters/>
      <con:method name="Cancel-reservation" id="b1c8f5db-4043-45ce-a138-5e5de05e3015" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:can="http://bb-gyg-api-dev.cloudhub.io/api/1/cancel-reservation">can:Response</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:can="http://bb-gyg-api-dev.cloudhub.io/api/1/cancel-reservation">can:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>500 401</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>500</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>500</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>500</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>500</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>405 504</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>404 405 401 500</con:status>
          <con:params/>
          <con:element xmlns:can="http://bb-gyg-api-dev.cloudhub.io/api/1/cancel-reservation">can:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xmlns:can="http://bb-gyg-api-dev.cloudhub.io/api/1/cancel-reservation">can:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="d05ce3fe-6e2a-4ee0-ab66-18cc24ba9565" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic YTBhNDdkZDY5OWFmNDc3MmE2ODVmZDlhYmQ4NmY0YmM6MjQ5NTlDNjRERDc3NDhkODgxZjY1ZDc1ODVkZWM3NDU="/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>https://bb-web-api-v1-t.ir-e1.cloudhub.io</con:endpoint>
          <con:request>{
  "cancelReservationRequest": {
    "reservationReference": "${#Project#reservationReference}"
  }
}</con:request>
          <con:originalUri>http://bb-gyg-api-dev.cloudhub.io/api/1/cancel-reservation</con:originalUri>
          <con:credentials>
            <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="Booking" path="/api/1/bookings" id="a1f6ff04-cbe1-4388-9a61-7a5d0a700292">
      <con:settings/>
      <con:parameters/>
      <con:method name="Booking" id="5810f2af-aaec-482c-bdd6-ba103579ff35" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404 400</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:book="https://bb-web-api-g.eu.cloudhub.io/api/bookings">book:Response</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:res="https://bb-web-api-g.eu.cloudhub.io/api/1/reservation">res:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>500 405 404 400 401</con:status>
          <con:params/>
          <con:element xmlns:book="https://bb-web-api-g.eu.cloudhub.io/api/bookings">book:Fault</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>405</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>500 400 401</con:status>
          <con:params/>
          <con:element xmlns:book="https://bb-web-api-g.eu.cloudhub.io/api/bookings">book:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:request name="Request 1" id="0ee0b8c8-1e27-47af-8dd6-01b6d2225aec" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic YTBhNDdkZDY5OWFmNDc3MmE2ODVmZDlhYmQ4NmY0YmM6MjQ5NTlDNjRERDc3NDhkODgxZjY1ZDc1ODVkZWM3NDU="/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>https://bb-web-api-v1-t.ir-e1.cloudhub.io</con:endpoint>
          <con:request>{
  "bookingRequest": {
    "bookingFee": "4",
    "agentBookingReference":"agent123",
"reservationReference": "dbecc2ea-6e76-4720-bdfc-ebae5243df15",
    "paymentMethod": "cash",
    "notes": "custom notes",
    "ticketPerPassenger": "1",
    "leadGuest": {
       "firstname": "Vimala",
      "lastname": "Pradaga",
      "email": "abc@test.com",
      "phone": "1234567890",
      "mobile": "1234567890"
    },
    "products": {
      "product": [
        {
         "productId": "194844",
		"dateOfTravel": "2019-04-10",
         "preferences": "Window seat",
          "discountAmount": "4",
          "discountCode": "discountCode 123",
          "promoCode": "discountCode 123",
          "currencyCode": "USD",
          "price": "100",
          "items": [
            {
              "category": "Child",
              "quantity": "1"
            },
            {
              "category": "Adult",
              "quantity": "2"
            }
          ]
        }
      ]
    }
  }
}</con:request>
          <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/bookings</con:originalUri>
          <con:credentials>
            <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="Availability" path="/api/1/products/${#Project#id}/availability" id="bb49af22-6dab-4036-a51d-57dc600f0715">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>fromDate</con:name>
          <con:value/>
          <con:style>QUERY</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>toDate</con:name>
          <con:value/>
          <con:style>QUERY</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>quantity</con:name>
          <con:value/>
          <con:style>QUERY</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="Availability" id="6fd60bc5-8553-44ef-9463-1a8b837244bc" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404 401</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:ava="https://bb-web-api-d.eu.cloudhub.io/api/availability">ava:Response</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:ava="https://bb-web-api-d.eu.cloudhub.io/api/availability">ava:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>500 400 404 401 405 422</con:status>
          <con:params/>
          <con:element xmlns:ava="https://bb-web-api-d.eu.cloudhub.io/api/availability">ava:Fault</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/hnb</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>xxxxxx</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>hgfdsadf</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>3GZ00201</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>3GZ00103</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>502</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400 502 401 500</con:status>
          <con:params/>
          <con:element xmlns:ava="https://bb-web-api-g.eu.cloudhub.io/api/1/availability">ava:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="704cd389-bb27-4b94-a9b6-a8317a693c06" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic NGYwNzZkMGRkMjc2NDJiNjg3MDljYmU3YjcwYjUyODY6NDE2YTIxMjk1NTlmNGMwQTgzMTQ3MmJkRmIwRDg5Y0Y=" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://bb-web-api-v1-t.ir-e1.cloudhub.io</con:endpoint>
          <con:request/>
          <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/availability</con:originalUri>
          <con:credentials>
            <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <con:entry key="fromDate" value="2019-02-05"/>
            <con:entry key="quantity" value="10"/>
            <con:entry key="toDate" value="2019-04-23"/>
          </con:parameters>
          <con:parameterOrder>
            <con:entry>fromDate</con:entry>
            <con:entry>toDate</con:entry>
            <con:entry>quantity</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="Products" path="/api/1/products" id="924bbd31-f2b8-44c2-bc8f-48d0044f0b53">
      <con:settings/>
      <con:parameters/>
      <con:method name="Products" id="1a4335ec-a300-41df-aa09-9a6256779a62" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:res="https://bb-web-api-g.eu.cloudhub.io/api/1/reservation">res:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:res="https://bb-web-api-g.eu.cloudhub.io/api/1/reservation">res:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>401 405 400</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>401 500 404 400 405</con:status>
          <con:params/>
          <con:element xmlns:prod="https://bb-web-api-g.eu.cloudhub.io/api/1/product">prod:Fault</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>502</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>syhht</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xmlns:prod="https://bb-web-api-g.eu.cloudhub.io/api/1/product">prod:Fault</con:element>
        </con:representation>
        <con:request name="product" id="7906572d-cc5f-47ba-81d8-a9d01a4164f9" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic YTBhNDdkZDY5OWFmNDc3MmE2ODVmZDlhYmQ4NmY0YmM6MjQ5NTlDNjRERDc3NDhkODgxZjY1ZDc1ODVkZWM3NDU=" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://bb-web-api-v1-t.ir-e1.cloudhub.io</con:endpoint>
          <con:request/>
          <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/product</con:originalUri>
          <con:credentials>
            <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="Reservation" path="/api/1/reservations" id="e6652d3c-a7e1-4aec-a5fa-f4cfd5b7884d">
      <con:settings/>
      <con:parameters/>
      <con:method name="Reservation" id="624482e8-134b-4d83-afc0-01d7f66269b7" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:res="https://bb-web-api-g.eu.cloudhub.io/api/1/reservation">res:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>400 404 401</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>ajhujhdee</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:res="https://bb-web-api-g.eu.cloudhub.io/api/1/reservation">res:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>500 401 400 422</con:status>
          <con:params/>
          <con:element xmlns:res="https://bb-web-api-g.eu.cloudhub.io/api/1/reservation">res:Fault</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>fwqq</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>404 401 500 422 400 415 405</con:status>
          <con:params/>
          <con:element xmlns:res="https://bb-web-api-g.eu.cloudhub.io/api/1/reservation">res:Fault</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>405</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/test</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>2sdeqd</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/xml</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>text</con:mediaType>
          <con:params/>
        </con:representation>
        <con:request name="Request 1" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic YTYwNGVjNWY4MDUxNGEzZmE4YmEyZmY3NjAyZmRiNzU6ODkwQkQwM2NBZmY0NGUwNkJhQjAwMjlCYkJDNzE2MEI="/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>https://bb-web-api-d.eu.cloudhub.io</con:endpoint>
          <con:request>{
	"reservationRequest": {
		"reservationFee": "5",
		"currencyCode": "USD",
		"paymentMethod": "cash",
		"notes": "custom notes",
		"reserveUntil": "2019-04-10",
		"leadGuest": {
			"firstname": "Test",
			"lastname": "Test",
			"email": "abc@test.com",
			"phone": "1234567890",
			"mobile": "1234567890"
		},
		"products": {
			"product": [{
				"productId": "101211",
				"eventId": "0000654628-0000000219",
				"dateOfTravel": "2019-04-10",
				"items": [{
						"category": "Adult",
						"quantity": "2"
					},
					{
						"category": "Child",
						"quantity": "1"
					}
				]
			}]
		}
	}
}</con:request>
          <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
          <con:credentials>
            <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="Cancel-Booking" path="/api/1/bookings/${#Project#bookingReference}/cancel" id="b3a544ec-3c6b-47cf-b2aa-3043c8006946">
      <con:settings/>
      <con:parameters/>
      <con:method name="Cancel-Booking" id="61f3cc0e-0225-4f05-a098-0337ca9513c1" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404 400</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>415 500 401 400</con:status>
          <con:params/>
          <con:element xmlns:can="https://bb-web-api-d.eu.cloudhub.io/api/bookings/b69cd870-3720-4470-b00a-193fabc059ef/cancel">can:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:can="https://bb-web-api-d.eu.cloudhub.io/api/bookings/b69cd870-3720-4470-b00a-193fabc059ef/cancel">can:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>500 400</con:status>
          <con:params/>
          <con:element xmlns:can="https://bb-web-api-d.eu.cloudhub.io/api/bookings/b69cd870-3720-4470-b00a-193fabc059ef/cancel">can:Fault</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>2018-02-02</con:mediaType>
          <con:params/>
        </con:representation>
        <con:request name="Request 1" id="dc4981b6-d96a-4471-bb9f-843b81500a4a" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic YTBhNDdkZDY5OWFmNDc3MmE2ODVmZDlhYmQ4NmY0YmM6MjQ5NTlDNjRERDc3NDhkODgxZjY1ZDc1ODVkZWM3NDU=" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://bb-web-api-v1-t.ir-e1.cloudhub.io</con:endpoint>
          <con:request>{
  "cancelBookingRequest": {
    "bookingReference": "8443eeb3-f76c-4d94-8a87-f57c61cf3ba1"
  }
}</con:request>
          <con:originalUri>https://bb-web-api-d.eu.cloudhub.io/api/bookings/b69cd870-3720-4470-b00a-193fabc059ef/cancel</con:originalUri>
          <con:credentials>
            <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="product" path="/api/1/products" id="3a73ed1c-693f-4dcf-b7f9-213063c729b1">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>supplierId</con:name>
          <con:value/>
          <con:style>QUERY</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="Method 1" id="048c83ae-d104-4b69-bcde-413334e90dff" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:prod="https://bigbus-trade-api-portal-t.eu.cloudhub.io/api/1/product">prod:Response</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:prod="https://bigbus-trade-api-portal-t.eu.cloudhub.io/api/1/product">prod:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>500 404 405 400 401</con:status>
          <con:params/>
          <con:element xmlns:prod="https://bigbus-trade-api-portal-t.eu.cloudhub.io/api/1/product">prod:Fault</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>405 502</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>502</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:request name="Request 1" id="01e651eb-4963-4822-b820-a92b3c7c101c" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic NmNjOGE5YzA3ODlkNDM0MWI2NTczOWY0YWM3YTQ2MGE6QTMyQ0UwOUJhNzY3NDZmMDlBRDdhNjM2QUVBMjREYTc=" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>http://bb-trade-api-t.cloudhub.io</con:endpoint>
          <con:request>{
  "reservationRequest": {
    "reservationFee": "5",
    "currencyCode": "USD",
    "paymentMethod": "cash",
    "notes": "custom notes",
    "reserveUntil": "2018-04-04",
    "underName": {
      "firstname": "Test",
      "lastname": "Test",
      "email": "abc@test.com",
      "phone": "1234567890",
      "mobile": "1234567890"
    },
    "products": {
      "product": [
        {
          "productId": " 14751",
          "dateOfTravel": "2018-04-04",
          "items": [
            {
              "category": "Adult",
              "quantity": "1"
            }
          ]
        }
      ]
    }
  }
}</con:request>
          <con:originalUri>https://bigbus-trade-api-portal-t.eu.cloudhub.io/api/1/product</con:originalUri>
          <con:credentials>
            <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:parameters>
            <entry key="supplierId" value="" xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
          <con:parameterOrder>
            <con:entry>supplierId</con:entry>
          </con:parameterOrder>
        </con:request>
        <con:request name="https://bb-web-api-t.eu.cloudhub.io/api/1/products?supplierId=EmpireState" id="7f1391af-cbd7-4720-8294-b8b4faed3319" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic QkQ5NDQxNzItMDNEOS00RjYzLUI0RjUtMzc3OTAwQjFGMEI3Ok5ZRVNCMDE=" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://bb-web-api-g.eu.cloudhub.io</con:endpoint>
          <con:request/>
          <con:originalUri>https://bb-web-api-t.eu.cloudhub.io/api/1/products</con:originalUri>
          <con:credentials>
            <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:parameters>
            <entry key="supplierId" value="EmpireState" xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
          <con:parameterOrder>
            <con:entry>supplierId</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" id="494628a3-7ebf-4620-b80e-934bcad33e22" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://bb-redeem-api.g.eu.cloudhub.io" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/>
    <con:endpoints>
      <con:endpoint>https://bb_redeem_api.d.eu.cloudhub.io</con:endpoint>
    </con:endpoints>
    <con:resource name="Redemption" path="/api/tickets/602009800000000409/usage" id="da756f14-21b9-4f45-8441-b86efd596d41">
      <con:settings/>
      <con:parameters/>
      <con:method name="Redemption" id="3146f668-f74a-42b8-bcdd-de65df7d3c47" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>500 404 400</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:usag="http://bb-redemption-web-api.eu.cloudhub.io/api/tickets/1871611/usage">usag:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>405</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>400 405 404 500</con:status>
          <con:params/>
          <con:element xmlns:usag="http://bb-redemption-web-api.eu.cloudhub.io/api/tickets/1871611/usage">usag:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="1bbe65bd-4942-48b7-9b05-24507026163f" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://bb-redemption-web-api-v1-t.ir-e1.cloudhub.io</con:endpoint>
          <con:request>{
 "ProductCode": "25071",
 "UseTime": "2019-11-14T22:32:34.964Z",
 "SupplierName": "ESB",
 "SupplierProductCode": "string"
}</con:request>
          <con:originalUri>http://bb-redemption-web-api.eu.cloudhub.io/api/tickets/1871611/usage</con:originalUri>
          <con:credentials>
            <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:testSuite id="bd2b7359-800f-452d-8863-82742072659a" name="ProductList_TestSuite">
    <con:settings/>
    <con:savedRecentRuns>1</con:savedRecentRuns>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="420edc4d-9481-4244-b5df-9a7185d08579" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ProductList_BMO" searchProperties="true">
      <con:description>TestCase generated for REST Resource ProductList</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="dbd488ac-9620-4c99-af7c-99d63d0bc9cd">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_ProductListTestdata.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Products\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_ProductListTestdata</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="ead8b2fb-d67e-4b22-905e-95adb82af015">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>BMO</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>TestCase</con:property>
          <con:property>Description (Optional)</con:property>
          <con:property>authorization</con:property>
          <con:property>contentType</con:property>
          <con:property>countryCode</con:property>
          <con:property>branchId</con:property>
          <con:property>productType</con:property>
          <con:property>cityId</con:property>
          <con:property>supplierId</con:property>
          <con:property>Expected Result</con:property>
          <con:property>Actual Reslult</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="83d4de21-ba63-40d4-afed-6c997e5911ab">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/products" methodName="Products" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
              <con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request/>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:attachment>
              <con:name>Book3.xlsx</con:name>
              <con:contentType>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</con:contentType>
              <con:size>59798</con:size>
              <con:contentId>Book3.xlsx</con:contentId>
              <con:data>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</con:data>
              <con:id>211c6168-3e86-4675-8b40-2bd7eeacce98</con:id>
            </con:attachment>
            <con:attachment>
              <con:name>Test Execution.xlsx</con:name>
              <con:contentType>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</con:contentType>
              <con:size>603595</con:size>
              <con:contentId>Test Execution.xlsx</con:contentId>
              <con:data></con:data>
              <con:id>cd68b355-de9e-4a2b-b747-1b65f8668516</con:id>
            </con:attachment>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script" id="6c0883e7-3ab6-47b3-bb4f-9f58ebfdafd1" disabled="true">
        <con:settings/>
        <con:config>
          <script>//def httpValue = testRunner.testCase.testSteps['Request'].testRequest.response.getResponseHeaders()
//log.info httpValue["#status#"]
//log.info httpValue</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="bbbc8e6e-65e8-422f-a409-6fb20478bda7">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>message</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.id[3]</con:sourcePath>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>id</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.id[3]</con:sourcePath>
            <con:targetType>id</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="3fcd0f29-d7b8-4a28-94f2-0468da71094d">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="8518b70e-365e-4a0f-9bdf-48dbd2d67621">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A4</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="c93105e0-ce26-4e42-9212-d6a628130da2">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value>null</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>54493</con:value>
        </con:property>
        <con:property>
          <con:name>id</con:name>
          <con:value>101213</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>dbd488ac-9620-4c99-af7c-99d63d0bc9cd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>ead8b2fb-d67e-4b22-905e-95adb82af015</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>83d4de21-ba63-40d4-afed-6c997e5911ab</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>bbbc8e6e-65e8-422f-a409-6fb20478bda7</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3fcd0f29-d7b8-4a28-94f2-0468da71094d</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>8518b70e-365e-4a0f-9bdf-48dbd2d67621</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="d39de6ba-3b79-4cd5-a750-8cdcd3e39d78" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ProductList_MM" searchProperties="true">
      <con:description>TestCase generated for REST Resource ProductList</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="2b9f6eef-97bd-4182-98c8-e6f6912f195f">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_ProductListTestdata.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Products\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>MM</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_ProductListTestdata</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="e7a63a5e-9a89-4c3b-99a4-4c5756aa30b8">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>MM</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>TestCase</con:property>
          <con:property>Description (Optional)</con:property>
          <con:property>authorization</con:property>
          <con:property>contentType</con:property>
          <con:property>countryCode</con:property>
          <con:property>branchId</con:property>
          <con:property>productType</con:property>
          <con:property>cityId</con:property>
          <con:property>supplierId</con:property>
          <con:property>Expected Result</con:property>
          <con:property>Actual Reslult</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="0e2b50e8-cb51-42b7-aaa9-9ed57b8a6534">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/products" methodName="Products" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
              <con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request/>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="54599808-1b42-458a-8175-8902254f59c3">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>message</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="606d38e3-04b0-490a-8581-a4fbc921a227">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="b4de7c2e-2d12-4605-a90c-96b5dd046115">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A7</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="c3f378f4-df17-48b9-be64-5a0d642982d1">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">null</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value><![CDATA[{"status":"SUCCESS","code":null,"message":null,"productResult":{"countries":[{"id":null,"name":"USA","code":"USA","cities":[{"id":null,"name":"USA -5 hours","branches":[{"id":"2","name":"UAT-New York","products":[{"id":"24659","name":"Night Tour NEW YORK","description":null,"printName":"Night Tour ","printText":"Valid for a single Night Tour. Departs from Stop#18- M&M World from 7pm to 9pm every 30min. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"18:00","toTime":"20:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"19:00","toTime":"21:00"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"19:00","toTime":"21:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"18:00","toTime":"20:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"18:00","toTime":"20:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"35.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"44.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"24490","name":"Classic Tour NEW YORK","description":null,"printName":"Classic","printText":"If purchased or redeemed after 3pm this ticket is valid until the same time the next day. This ticket is valid on the Downtown and Uptown Loops. Last departure for Uptown and Downtown is at 5pm. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:00","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"44.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"53.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"24511","name":"Deluxe Tour NEW YORK","description":null,"printName":"Deluxe Tour ","printText":"Valid for 2 days. If purchased or redeemed after 3PM, this ticket is valid until the same time 2 days from now. This ticket is valid on the Uptown, Downtown, Harlem, Brooklyn Loops and Night Tours as well as a Sightseeing Cruise. Last depature for the Uptown and Downtown  is at 5PM. Last depature for the Brooklyn and Harlem Loop is 3PM. Want more? Please ask an agent about upgrades.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:00","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"62.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"80.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"24491","name":"Premium Tour NEW YORK","description":null,"printName":"2 Day Premium","printText":"Valid for 2 Days. If purchased or redeemed after 3pm this ticket is valid until the same time 2 days from now.This ticket is valid on the Downtown, Midtown, Uptown and the Brooklyn Tours. . Last departure for Uptown and Downtown is at 5pm. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:00","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"53.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"62.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"4","name":"UAT-Washington DC","products":[{"id":"44569","name":"Panoramic Night Tour WASHINGTON DC","description":null,"printName":"Panoramic Night Tour ","printText":"Valid for one Night Tour. See current brochure for departure time.\n","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-12","fromTime":"18:30","toTime":"20:30"},{"startPeriod":"Mar-13","endPeriod":"May-25","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"May-26","endPeriod":"Sep-04","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"Sep-05","endPeriod":"Dec-31","fromTime":"18:30","toTime":"20:30"}],"category":[{"categoryName":"Child","prices":[{"amount":"26.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"35.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"44567","name":"Premium Tour WASHINGTON DC","description":null,"printName":"Premium Tour ","printText":"Valid for 1 day on all Loops","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-12","fromTime":"09:00","toTime":"16:00"},{"startPeriod":"Mar-13","endPeriod":"May-25","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"May-26","endPeriod":"Sep-04","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Sep-05","endPeriod":"Dec-31","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"26.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"44.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"44568","name":"Deluxe Tour WASHINGTON DC","description":null,"printName":"Deluxe Tour ","printText":"Valid for 2 days on all Loops","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-12","fromTime":"09:00","toTime":"16:00"},{"startPeriod":"Mar-13","endPeriod":"May-25","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"May-26","endPeriod":"Sep-04","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Sep-05","endPeriod":"Dec-31","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"62.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"44.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"6","name":"UAT-Miami","products":[{"id":"64657","name":"Deluxe Tour MIAMI","description":null,"printName":"Deluxe Tour ","printText":"2 Days all Loops Tour, Biscayne Boat and Night Tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:15","toTime":"17:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"71.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"57.6","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"64658","name":"Night Tour MIAMI","description":null,"printName":"Night Tour","printText":"Departs from Senor frogs at 7:30pm and Central Station 8:00pm.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"19:30","toTime":"21:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"26.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"17.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"64570","name":"Classic Tour MIAMI","description":null,"printName":"Classic Tour ","printText":"1 Day all loops tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:15","toTime":"17:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"49.0","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"39.0","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"64571","name":"Premium Tour MIAMI","description":null,"printName":"Premium Tour ","printText":"1 Day All Loops Tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:15","toTime":"17:30"}],"category":[{"categoryName":"Child","prices":[{"amount":"53.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"62.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]}]},{"id":null,"name":"USA -8 hours","branches":[{"id":"5","name":"UAT-San Francisco","products":[{"id":"54493","name":"Classic Tour SAN FRANCISCO","description":null,"printName":"Classic Tour ","printText":"Daily Tours from 9:00am - 5:00pm. Last bus departs Stop 1 at 5:00pm. Ticket valid for One Day Hop-on Hop-Tour and Walking Tours. Tour operates rain or shine. All sales are final. No refunds or exchanges.  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"36.0","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"46.8","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"54495","name":"Deluxe Tour SAN FRANCISCO","description":null,"printName":"Deluxe Tour ","printText":"Daily Tours from 9:00am - 5:00pm. Last bus departs Stop 1 at 5:00pm. Ticket valid for Two Day Hop-on Hop-Tour, Walking Tours & Night Tour (Except May 24th 2017). Tour operates rain or shine. All sales are final. No refunds or exchanges.  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"67.5","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"54.0","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"54496","name":"Night Tour SAN FRANCISCO","description":null,"printName":"Night Tour ","printText":"Daily at 6:30pm, 7:00pm & (7:30pm April - October) Arrive 30 minutes prior to desired tour time as seats are first come first serve. Tour operates rain or shine. All sales are final. No refunds of exchanges.  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"18:30","toTime":"21:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"18:30","toTime":"21:00"},{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"18:30","toTime":"21:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"27.0","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"18.0","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"54494","name":"Premium Tour SAN FRANCISCO","description":null,"printName":"Premium Tour ","printText":"Daily Tours from 9:00am - 5:00pm. Last bus departs Stop 1 at 5:00pm. Ticket valid for One Day Hop-on Hop-Tour & Walking Tours . Tour operates rain or shine. All sales are final. No refunds or exchanges.  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"46.8","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"58.5","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"7","name":"UAT-Las Vegas","products":[{"id":"74505","name":"Deluxe Tour LAS VEGAS","description":null,"printName":"Deluxe","printText":"Valid for 3 days hop on hop off 10 am to 6 pm daily. If purchased or redeemed after 3 PM,this ticket is valid until the same time 3 days from now. THIS TICKET INCLUDES STATE PASSENGER TAX.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"10:00","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"67.5","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"53.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"74506","name":"Night Tour LAS VEGAS","description":null,"printName":"Panoramic Night Tour","printText":"Must be used within 24 hours after purchase. THIS TICKET INCLUDES STATE PASSENGER TAX.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"19:00","toTime":"10:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"35.0","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"45.0","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"74503","name":"Classic Tour LAS VEGAS","description":null,"printName":"Classic","printText":"Valid for one day hop on hop off tour 10 am to 6 pm daily. THIS TICKET INCLUDES STATE PASSENGER TAX.  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"10:00","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"44.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"35.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"74504","name":"Premium Tour LAS VEGAS","description":null,"printName":"Premium","printText":"Valid for 2 days  hop on hop off 10 am to 6 pm daily. If purchased or redeemed after 3 PM,this ticket is valid until the same time 2 days from now. THIS TICKET INCLUDES STATE PASSENGER TAX.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"10:00","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"53.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"44.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]}]},{"id":null,"name":"USA -6 hours","branches":[{"id":"15","name":"UAT-Chicago","products":[{"id":"154565","name":"Premium Tour CHICAGO","description":null,"printName":"Premium Tour ","printText":"Valid for 2 day on the date of purchase.If purchased after 3 PM this ticket is valid for the next day.Want to explore more? Upgrade your ticket with a member of our staff.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"10:00","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"09:00","toTime":"16:00"},{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-30","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"27.0","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"49.5","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"154656","name":"Night Tour CHICAGO","description":null,"printName":"Night Tour ","printText":"Live Guided, Panoramic, Non-Stop Night Tour of Chicago. Departs from Navy Pier (stop 11) Nightly at 7.00pm","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"19:45","toTime":"22:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"19:45","toTime":"22:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"26.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"13.5","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"154564","name":"Classic Tour CHICAGO","description":null,"printName":"Classic Tour ","printText":"Valid for one day on the date of purchase.If purchase after 3PM,ticket is valid for the next day.Want to explore more? Upgrade your ticket with a member of the staff.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"10:00","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"09:00","toTime":"16:00"},{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-30","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"40.5","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"22.5","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"154655","name":"Deluxe Tour CHICAGO","description":null,"printName":"Deluxe Tour ","printText":"Valid for 2 day on the date of purchase.If purchased after 3 PM this ticket is valid for the next day.Want to explore more? Upgrade your ticket with a member of our staff.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"10:00","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"09:00","toTime":"16:00"},{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-30","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"31.5","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"58.5","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]},{"id":null,"name":" Europe","code":"EUR","cities":[{"id":null,"name":"Europe Time Zone","branches":[{"id":"16","name":"UAT-Rome","products":[{"id":"164498","name":"Premium Tour ROME","description":null,"printName":"Premium Tour ","printText":"Valid for 2 consecutive days on City Centre Loop & FREE WALKING TOURS Exclusive to Big Bus Rome Guests. # 1: Big Bus Stop Vatican at 12.00 - # 2 Big Bus Stop Vatican at 14.00 - # 3 Big Bus Stop Piazza Venezia at 15.30 - # 4 Big Bus Stop Barberini at 17.00 Enjoy your stay in Rome.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Apr-01","endPeriod":"Nov-01","fromTime":"08:30","toTime":"20:15"},{"startPeriod":"Nov-02","endPeriod":"Dec-31","fromTime":"09:00","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"35.1","currencyCode":"EUR"}]},{"categoryName":"Child","prices":[{"amount":"22.5","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"164497","name":"Classic Tour ROME","description":null,"printName":"Classic Tour ","printText":"City Centre Loop & FREE WALKING TOURS Exclusive to Big Bus Rome Guests. # 1: Big Bus Stop Vatican at 12.00 - # 2 Big Bus Stop Vatican at 14.00 - # 3 Big Bus Stop Piazza Venezia at 15.30 - # 4 Big Bus Stop Barberini at 17.00.Enjoy your stay in Rome.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Apr-01","endPeriod":"Nov-01","fromTime":"08:30","toTime":"20:15"},{"startPeriod":"Nov-02","endPeriod":"Dec-31","fromTime":"09:00","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"28.8","currencyCode":"EUR"}]},{"categoryName":"Child","prices":[{"amount":"18.9","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"164499","name":"Deluxe Tour ROME","description":null,"printName":"Deluxe Tour ","printText":"Valid for 3 consecutive days on City Centre Loop & FREE WALKING TOURS Exclusive to Big Bus Rome Guests. # 1: Big Bus Stop Vatican at 12.00 - # 2 Big Bus Stop Vatican at 14.00 - # 3 Big Bus Stop Piazza Venezia at 15.30 - # 4 Big Bus Stop Barberini at 17.00\nEnjoy your stay in Rome.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Apr-01","endPeriod":"Nov-01","fromTime":"08:30","toTime":"20:15"},{"startPeriod":"Nov-02","endPeriod":"Dec-31","fromTime":"09:00","toTime":"18:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"29.7","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"43.2","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"3","name":"UAT-Paris","products":[{"id":"34664","name":"Deluxe Tour PARIS","description":null,"printName":"Deluxe Tour ","printText":"Valid for 2 consecutive days","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"May-31","fromTime":"09:30","toTime":"17:15"},{"startPeriod":"Jun-01","endPeriod":"Jun-30","fromTime":"09:15","toTime":"18:30"},{"startPeriod":"Jul-01","endPeriod":"Aug-31","fromTime":"09:15","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"21.6","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"43.2","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"34665","name":"Night Tour PARIS","description":null,"printName":"Night Tour ","printText":"Panoramic Night Tour- Valid for 1 Tour  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"21:15","toTime":"23:15"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"20:15","toTime":"22:15"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"21:15","toTime":"23:15"},{"startPeriod":"Jan-05","endPeriod":"Mar-26","fromTime":"20:15","toTime":"22:15"},{"startPeriod":"Mar-26","endPeriod":"Oct-29","fromTime":"21:15","toTime":"23:15"}],"category":[{"categoryName":"Child","prices":[{"amount":"10.8","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"20.7","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"34500","name":"Classic Tour PARIS","description":null,"printName":"Classic Tour ","printText":"Valid 1 Day ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"May-31","fromTime":"09:30","toTime":"17:15"},{"startPeriod":"Jun-01","endPeriod":"Jun-30","fromTime":"09:15","toTime":"18:30"},{"startPeriod":"Jul-01","endPeriod":"Aug-31","fromTime":"09:15","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"15.3","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"31.5","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"34501","name":"Premium Tour PARIS","description":null,"printName":"Premium Tour ","printText":"Valid for 2 consecutive days","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"May-31","fromTime":"09:30","toTime":"17:15"},{"startPeriod":"Jun-01","endPeriod":"Jun-30","fromTime":"09:15","toTime":"18:30"},{"startPeriod":"Jul-01","endPeriod":"Aug-31","fromTime":"09:15","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"17:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"35.1","currencyCode":"EUR"}]},{"categoryName":"Child","prices":[{"amount":"18.0","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"8","name":"UAT-Vienna","products":[{"id":"84572","name":"Classic Tour VIENNA","description":null,"printName":"Classic Tour","printText":"Valid for 24 hours, All Routes & City walk. Enjoy your time in Vienna. incl. 10% VAT.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"09:30","toTime":"16:30"},{"startPeriod":"Mar-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Aug-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"16:30"}],"category":[{"categoryName":"Child","prices":[{"amount":"17.1","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"25.2","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"84661","name":"Deluxe Tour VIENNA","description":null,"printName":"Deluxe Tour ","printText":"Valid for 48 hours + 3rd Day FREE. All Routes, river cruise, City walk & Night Tour. Enjoy your time in Vienna. incl. 10% VAT","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"09:30","toTime":"16:30"},{"startPeriod":"Mar-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Aug-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"16:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"44.1","currencyCode":"EUR"}]},{"categoryName":"Child","prices":[{"amount":"28.8","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"84663","name":"Night Tour VIENNA","description":null,"printName":"Night Tour ","printText":"Tour starts from stop 1 \"Opera\". Enjoy your time in Vienna. incl. 10 % VAT","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Apr-01","endPeriod":"Sep-30","fromTime":"19:30","toTime":"20:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"15.3","currencyCode":"EUR"}]},{"categoryName":"Child","prices":[{"amount":"10.8","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"84573","name":"Premium Tour VIENNA","description":null,"printName":"Premium Tour ","printText":"Valid for 48 hours + 3rd Day FREE. All Routes, City walk & Night Tour. Enjoy your time in Vienna. incl. 10 % VAT","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"09:30","toTime":"16:30"},{"startPeriod":"Mar-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Aug-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"16:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"30.6","currencyCode":"EUR"},{"amount":"30.6","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"30.6","currencyCode":"EUR"},{"amount":"30.6","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"9","name":"UAT-Budapest","products":[{"id":"94897","name":"Night Tour BUDAPEST","description":null,"printName":"Night Tour BUDAPEST","printText":"Valid on one Night Tour starting at 19:30pm at the bus stop no.15. Not valid for Day Tour or Hop On Hop Off","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Mar-15","endPeriod":"Apr-30","fromTime":"19:00","toTime":"20:00"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"21:00","toTime":"22:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"19:00","toTime":"20:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"19:00","toTime":"20:00"},{"startPeriod":"Jan-01","endPeriod":"Jan-15","fromTime":"19:00","toTime":"20:00"},{"startPeriod":"Jan-15","endPeriod":"Mar-14","fromTime":"18:00","toTime":"19:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"4200.0","currencyCode":"HUF"}]},{"categoryName":"Adult","prices":[{"amount":"4200.0","currencyCode":"HUF"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"94866","name":"Deluxe Tour BUDAPEST","description":null,"printName":"Deluxe Tour ","printText":"Valid for 72 Hr on all Big Bus  Budapest Routes, Walking Tour, River Cruise ( Dock 11), Night Tour ( Stop 15) and Castle Shuttle (Operated by KNK Adventure KFT).\n Exch Rate 300 Huf. Enjoy your time in Budapest","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Mar-15","endPeriod":"Apr-30","fromTime":"09:00","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-01","endPeriod":"Jan-15","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-16","endPeriod":"Mar-14","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"6210.0","currencyCode":"HUF"}]},{"categoryName":"Adult","prices":[{"amount":"9990.0","currencyCode":"HUF"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"94865","name":"Premium Tour BUDAPEST","description":null,"printName":"Premium Tour ","printText":"Valid for 2 days hop-on hop-off bus tour, walking tour and river cruise valid for 48 Hr. Exchange Rate 300 HUF","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Mar-15","endPeriod":"Apr-30","fromTime":"09:00","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-01","endPeriod":"Jan-15","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-16","endPeriod":"Mar-14","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"4590.0","currencyCode":"HUF"}]},{"categoryName":"Adult","prices":[{"amount":"7290.0","currencyCode":"HUF"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"94864","name":"Classic Tour BUDAPEST","description":null,"printName":"Classic Tour ","printText":"Valid for 24 Hr on all Big Bus Budapest Routes and free walking tour.Enjoy your time in Budapest. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Mar-15","endPeriod":"Apr-30","fromTime":"09:00","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-01","endPeriod":"Jan-15","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-16","endPeriod":"Mar-14","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"3780.0","currencyCode":"HUF"}]},{"categoryName":"Adult","prices":[{"amount":"5940.0","currencyCode":"HUF"}]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]},{"id":null,"name":"United Arab Emirates","code":"ARE","cities":[{"id":null,"name":"Dubai (+4 hours)","branches":[{"id":"11","name":"UAT-Dubai","products":[{"id":"114559","name":"Night Tour DUBAI","description":null,"printName":"Night Tour ","printText":"Night Tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"19:15","toTime":"21:15"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"19:25","toTime":"21:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"19:15","toTime":"21:15"}],"category":[{"categoryName":"Adult","prices":[{"amount":"166.5","currencyCode":"AED"}]},{"categoryName":"Child","prices":[{"amount":"108.0","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"11111","name":"Aquaventure Waterpark","description":null,"printName":"Aquaventure Waterpark","printText":"","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Attractions","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"114556","name":"Classic Tour DUBAI","description":null,"printName":"Classic ","printText":"Ticket includes: Big Bus Dubai Hop On Hop Off 1 Day Tour, Dubai Creek Arabian Dhow Cruise, Dubai Marina RTA Water Bus, Dubai Museum, Shingdagha Museum, Museum Collection.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:50","toTime":"20:20"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"19:20"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:50","toTime":"20:20"}],"category":[{"categoryName":"Child","prices":[{"amount":"156.6","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"245.7","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"114557","name":"Premium Tour DUBAI","description":null,"printName":"Premium Tour ","printText":"Ticket includes: Big Bus Dubai Hop On Hop Off 2 Day Tour, Dubai Creek Arabian Dhow Cruise, Dubai Marina RTA Water Bus, Dubai Museum, Shingdagha Museum, Museum Collection.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:50","toTime":"20:20"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"19:20"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:50","toTime":"20:20"}],"category":[{"categoryName":"Child","prices":[{"amount":"181.8","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"282.6","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"114558","name":"Deluxe Tour DUBAI","description":null,"printName":"Deluxe Tour ","printText":"Ticket Includes: Big Bus Hop On Hop Off 3 Day Tour*, Desert Sunset Experience, A Magical Night Tour Journey, Atlantis the Palm Lost Chambers Aquarium**, Marina & Island Lagoon Boat Cruise, Palm Island Drive, Dubai Museum @ Al Fahidi Fort, Flamingo Lagoon Discovery, Shindagha Museum, Museum Collection, Arabian Dhow Cruise Dubai Creek, Big Bus Sharjah (Half Day Tour), Ambassador Lagoon @ Atlantis the Palm**, Dubai Marina RTA Water Bus, Heritage Village Walking Tour, Arabian Treasures Walking Tour, Downtown Discovery Walk","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:50","toTime":"20:20"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"19:20"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:50","toTime":"20:20"}],"category":[{"categoryName":"Child","prices":[{"amount":"222.3","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"339.3","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"12","name":"UAT-Abu Dhabi","products":[{"id":"124562","name":"Premium Tour ABU DHABI","description":null,"printName":"Premium Tour ","printText":"Valid for 2 Days","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:50","toTime":"20:20"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"19:20"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:50","toTime":"20:20"}],"category":[{"categoryName":"Child","prices":[{"amount":"181.8","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"282.6","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"124666","name":"Deluxe Tour ABU DHABI","description":null,"printName":"Deluxe Tour ","printText":"Hop-on Hop-off Valid for 2 Days.Big City Pass Valid for 7 Days,20  Tops Attractions (see brochure for details)\nConditions apply!","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"09:00","toTime":"20:00"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"20:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"20:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"222.3","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"339.3","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"124667","name":"Night Tour ABU DHABI","description":null,"printName":"Night Tour ","printText":"Night Tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"19:30","toTime":"21:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"166.5","currencyCode":"AED"}]},{"categoryName":"Child","prices":[{"amount":"108.0","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"124560","name":"Classic Tour ABU DHABI","description":null,"printName":"Classic Tour ","printText":"Classic Tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:50","toTime":"20:20"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"19:20"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:50","toTime":"20:20"}],"category":[{"categoryName":"Child","prices":[{"amount":"156.6","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"245.7","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"20","name":"UAT-Muscat","products":[{"id":"205003","name":"Classic Tour MUSCAT","description":null,"printName":"Classic","printText":" Valid for 1 Day open-top sightseeing bus tour.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"205005","name":"Premium Tour MUSCAT","description":null,"printName":"Premium","printText":"Valid for 2 days open-top sightseeing bus tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]},{"id":null,"name":"United Kingdom","code":"GBR","cities":[{"id":null,"name":"London GMT","branches":[{"id":"1","name":"UAT-London","products":[{"id":"14489","name":"Premium Tour LONDON","description":null,"printName":"Premium 2 Day","printText":"Valid for 48 Hours Hop On Hop Off. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:30","toTime":"16:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:30","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:30","toTime":"17:30"}],"category":[{"categoryName":"Child","prices":[{"amount":"19.8","currencyCode":"GBP"}]},{"categoryName":"Adult","prices":[{"amount":"39.6","currencyCode":"GBP"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"14488","name":"Classic Tour LONDON","description":null,"printName":"Classic 1 Day","printText":"Valid for 24 Hours. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:30","toTime":"16:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:30","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:30","toTime":"17:30"}],"category":[{"categoryName":"Child","prices":[{"amount":"17.1","currencyCode":"GBP"}]},{"categoryName":"Adult","prices":[{"amount":"33.3","currencyCode":"GBP"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"14660","name":"Deluxe Tour LONDON","description":null,"printName":"Deluxe 3 Day","printText":"Ticket valid for 72 Hours Hop On Hop Off.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:30","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:30","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:30","toTime":"17:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"16:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"45.0","currencyCode":"GBP"}]},{"categoryName":"Child","prices":[{"amount":"22.5","currencyCode":"GBP"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"14751","name":" Night Tour LONDON","description":null,"printName":"Panoramic Night Tour","printText":"Panoramic Night tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]},{"id":null,"name":"China","code":"CHN","cities":[{"id":null,"name":"Hong Kong","branches":[{"id":"13","name":"UAT-Hong Kong","products":[{"id":"134750","name":"Night Tour HONG KONG","description":null,"printName":"Night Tour ","printText":"Night Tour ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"134508","name":"Premium Tour HONG KONG","description":null,"printName":"Premium","printText":"Premium Ticket Valid for 2 days","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"18:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"459.0","currencyCode":"HKD"}]},{"categoryName":"Adult","prices":[{"amount":"504.0","currencyCode":"HKD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"134697","name":"Deluxe Tour HONG KONG","description":null,"printName":"Deluxe","printText":"Deluxe Ticket is valid for 2 days","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"134507","name":"Classic Tour HONG KONG","description":null,"printName":"Classic ","printText":"Classic Ticket Valid for 1 day","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"18:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"387.0","currencyCode":"HKD"}]},{"categoryName":"Adult","prices":[{"amount":"432.0","currencyCode":"HKD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"13210","name":"Single Route Voucher","description":null,"printName":"Single Route Voucher","printText":"(HK ISLAND / KOWLOON / STANLEY / NIGHT)","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]},{"id":null,"name":"Australia","code":"AUS","cities":[{"id":null,"name":"Sydney","branches":[{"id":"19","name":"UAT-Sydney","products":[{"id":"194595","name":"Deluxe Tour SYDNEY","description":null,"printName":"Deluxe","printText":"Valid for 48 Hr hop On Hop Off\nGST inc in above amout: $??\nTAX INV ABN49086726329","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"18:00"},{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"18:00"},{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"89.1","currencyCode":"AUD"}]},{"categoryName":"Child","prices":[{"amount":"63.0","currencyCode":"AUD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"194593","name":"Classic Tour SYDNEY","description":null,"printName":"Classic","printText":"Valid for 24 Hr Hop On Hop Off\nGST inc in above amout: $??\nTAX INV ABN49086726329","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"08:30","toTime":"17:00"},{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"08:30","toTime":"17:00"},{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"08:30","toTime":"17:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"45.0","currencyCode":"AUD"}]},{"categoryName":"Child","prices":[{"amount":"31.5","currencyCode":"AUD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"194594","name":"Premium Tour SYDNEY","description":null,"printName":"Premium","printText":"Valid for 48 Hr Hop On Hop Off\nGST inc in above amout: $??\nTAX INV ABN49086726329","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"63.0","currencyCode":"AUD"}]},{"categoryName":"Child","prices":[{"amount":"41.4","currencyCode":"AUD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]}]}}]]></con:value>
        </con:property>
        <con:property>
          <con:name>id</con:name>
          <con:value/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>dbd488ac-9620-4c99-af7c-99d63d0bc9cd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>d90969e7-a33c-460e-9cdc-3816b9d68552</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>ead8b2fb-d67e-4b22-905e-95adb82af015</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>83d4de21-ba63-40d4-afed-6c997e5911ab</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>bbbc8e6e-65e8-422f-a409-6fb20478bda7</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3fcd0f29-d7b8-4a28-94f2-0468da71094d</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>8518b70e-365e-4a0f-9bdf-48dbd2d67621</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>c3f378f4-df17-48b9-be64-5a0d642982d1</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b4de7c2e-2d12-4605-a90c-96b5dd046115</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="7320973d-0da1-48aa-a296-0720d5fa160b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ProductList_MO" searchProperties="true">
      <con:description>TestCase generated for REST Resource ProductList</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="8c092401-336e-48fd-9e33-5f3757f598af">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_ProductListTestdata.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Products\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>MO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_ProductListTestdata</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="8782a02c-7c88-4b34-b15c-af6dde4dbce7">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>MO</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>TestCase</con:property>
          <con:property>Description (Optional)</con:property>
          <con:property>authorization</con:property>
          <con:property>contentType</con:property>
          <con:property>countryCode</con:property>
          <con:property>branchId</con:property>
          <con:property>productType</con:property>
          <con:property>cityId</con:property>
          <con:property>supplierId</con:property>
          <con:property>Expected Result</con:property>
          <con:property>Actual Reslult</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="dcdea8f3-00c3-4746-b773-613efa2fe477">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/products" methodName="Products" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
              <con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request/>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="7588c9e8-9da3-4cc0-a7a5-3cf6644444f1">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>message</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="15c8e245-a7b0-4452-a58f-c7c7a8b617fa">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="00ddc3df-e0f1-43d1-a112-8c1100d2e574">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A9</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="7aa9106b-61ea-4fc8-a39b-d4d77b6f394c">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value>null</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value><![CDATA[{"status":"SUCCESS","code":null,"message":null,"productResult":{"countries":[{"id":null,"name":"USA","code":"USA","cities":[{"id":null,"name":"USA -8 hours","branches":[{"id":"5","name":"UAT-San Francisco","products":[{"id":"54493","name":"Classic Tour SAN FRANCISCO","description":null,"printName":"Classic Tour ","printText":"Daily Tours from 9:00am - 5:00pm. Last bus departs Stop 1 at 5:00pm. Ticket valid for One Day Hop-on Hop-Tour and Walking Tours. Tour operates rain or shine. All sales are final. No refunds or exchanges.  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"36.0","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"46.8","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"54495","name":"Deluxe Tour SAN FRANCISCO","description":null,"printName":"Deluxe Tour ","printText":"Daily Tours from 9:00am - 5:00pm. Last bus departs Stop 1 at 5:00pm. Ticket valid for Two Day Hop-on Hop-Tour, Walking Tours & Night Tour (Except May 24th 2017). Tour operates rain or shine. All sales are final. No refunds or exchanges.  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"67.5","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"54.0","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"54496","name":"Night Tour SAN FRANCISCO","description":null,"printName":"Night Tour ","printText":"Daily at 6:30pm, 7:00pm & (7:30pm April - October) Arrive 30 minutes prior to desired tour time as seats are first come first serve. Tour operates rain or shine. All sales are final. No refunds of exchanges.  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"18:30","toTime":"21:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"18:30","toTime":"21:00"},{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"18:30","toTime":"21:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"27.0","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"18.0","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"54494","name":"Premium Tour SAN FRANCISCO","description":null,"printName":"Premium Tour ","printText":"Daily Tours from 9:00am - 5:00pm. Last bus departs Stop 1 at 5:00pm. Ticket valid for One Day Hop-on Hop-Tour & Walking Tours . Tour operates rain or shine. All sales are final. No refunds or exchanges.  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"46.8","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"58.5","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"7","name":"UAT-Las Vegas","products":[{"id":"74505","name":"Deluxe Tour LAS VEGAS","description":null,"printName":"Deluxe","printText":"Valid for 3 days hop on hop off 10 am to 6 pm daily. If purchased or redeemed after 3 PM,this ticket is valid until the same time 3 days from now. THIS TICKET INCLUDES STATE PASSENGER TAX.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"10:00","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"67.5","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"53.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"74506","name":"Night Tour LAS VEGAS","description":null,"printName":"Panoramic Night Tour","printText":"Must be used within 24 hours after purchase. THIS TICKET INCLUDES STATE PASSENGER TAX.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"19:00","toTime":"10:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"35.0","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"45.0","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"74503","name":"Classic Tour LAS VEGAS","description":null,"printName":"Classic","printText":"Valid for one day hop on hop off tour 10 am to 6 pm daily. THIS TICKET INCLUDES STATE PASSENGER TAX.  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"10:00","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"44.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"35.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"74504","name":"Premium Tour LAS VEGAS","description":null,"printName":"Premium","printText":"Valid for 2 days  hop on hop off 10 am to 6 pm daily. If purchased or redeemed after 3 PM,this ticket is valid until the same time 2 days from now. THIS TICKET INCLUDES STATE PASSENGER TAX.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"10:00","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"53.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"44.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]}]},{"id":null,"name":"USA -6 hours","branches":[{"id":"15","name":"UAT-Chicago","products":[{"id":"154565","name":"Premium Tour CHICAGO","description":null,"printName":"Premium Tour ","printText":"Valid for 2 day on the date of purchase.If purchased after 3 PM this ticket is valid for the next day.Want to explore more? Upgrade your ticket with a member of our staff.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"10:00","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"09:00","toTime":"16:00"},{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-30","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"27.0","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"49.5","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"154656","name":"Night Tour CHICAGO","description":null,"printName":"Night Tour ","printText":"Live Guided, Panoramic, Non-Stop Night Tour of Chicago. Departs from Navy Pier (stop 11) Nightly at 7.00pm","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"19:45","toTime":"22:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"19:45","toTime":"22:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"26.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"13.5","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"154564","name":"Classic Tour CHICAGO","description":null,"printName":"Classic Tour ","printText":"Valid for one day on the date of purchase.If purchase after 3PM,ticket is valid for the next day.Want to explore more? Upgrade your ticket with a member of the staff.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"10:00","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"09:00","toTime":"16:00"},{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-30","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"40.5","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"22.5","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"154655","name":"Deluxe Tour CHICAGO","description":null,"printName":"Deluxe Tour ","printText":"Valid for 2 day on the date of purchase.If purchased after 3 PM this ticket is valid for the next day.Want to explore more? Upgrade your ticket with a member of our staff.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"10:00","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"09:00","toTime":"16:00"},{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-30","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"31.5","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"58.5","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]}]},{"id":null,"name":"USA -5 hours","branches":[{"id":"2","name":"UAT-New York","products":[{"id":"24659","name":"Night Tour NEW YORK","description":null,"printName":"Night Tour ","printText":"Valid for a single Night Tour. Departs from Stop#18- M&M World from 7pm to 9pm every 30min. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"18:00","toTime":"20:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"19:00","toTime":"21:00"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"19:00","toTime":"21:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"18:00","toTime":"20:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"18:00","toTime":"20:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"35.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"44.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"24490","name":"Classic Tour NEW YORK","description":null,"printName":"Classic","printText":"If purchased or redeemed after 3pm this ticket is valid until the same time the next day. This ticket is valid on the Downtown and Uptown Loops. Last departure for Uptown and Downtown is at 5pm. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:00","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"44.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"53.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"24511","name":"Deluxe Tour NEW YORK","description":null,"printName":"Deluxe Tour ","printText":"Valid for 2 days. If purchased or redeemed after 3PM, this ticket is valid until the same time 2 days from now. This ticket is valid on the Uptown, Downtown, Harlem, Brooklyn Loops and Night Tours as well as a Sightseeing Cruise. Last depature for the Uptown and Downtown  is at 5PM. Last depature for the Brooklyn and Harlem Loop is 3PM. Want more? Please ask an agent about upgrades.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:00","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"62.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"80.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"24491","name":"Premium Tour NEW YORK","description":null,"printName":"2 Day Premium","printText":"Valid for 2 Days. If purchased or redeemed after 3pm this ticket is valid until the same time 2 days from now.This ticket is valid on the Downtown, Midtown, Uptown and the Brooklyn Tours. . Last departure for Uptown and Downtown is at 5pm. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:00","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"53.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"62.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"4","name":"UAT-Washington DC","products":[{"id":"44569","name":"Panoramic Night Tour WASHINGTON DC","description":null,"printName":"Panoramic Night Tour ","printText":"Valid for one Night Tour. See current brochure for departure time.\n","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-12","fromTime":"18:30","toTime":"20:30"},{"startPeriod":"Mar-13","endPeriod":"May-25","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"May-26","endPeriod":"Sep-04","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"Sep-05","endPeriod":"Dec-31","fromTime":"18:30","toTime":"20:30"}],"category":[{"categoryName":"Child","prices":[{"amount":"26.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"35.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"44567","name":"Premium Tour WASHINGTON DC","description":null,"printName":"Premium Tour ","printText":"Valid for 1 day on all Loops","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-12","fromTime":"09:00","toTime":"16:00"},{"startPeriod":"Mar-13","endPeriod":"May-25","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"May-26","endPeriod":"Sep-04","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Sep-05","endPeriod":"Dec-31","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"26.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"44.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"44568","name":"Deluxe Tour WASHINGTON DC","description":null,"printName":"Deluxe Tour ","printText":"Valid for 2 days on all Loops","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-12","fromTime":"09:00","toTime":"16:00"},{"startPeriod":"Mar-13","endPeriod":"May-25","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"May-26","endPeriod":"Sep-04","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Sep-05","endPeriod":"Dec-31","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"62.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"44.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"6","name":"UAT-Miami","products":[{"id":"64657","name":"Deluxe Tour MIAMI","description":null,"printName":"Deluxe Tour ","printText":"2 Days all Loops Tour, Biscayne Boat and Night Tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:15","toTime":"17:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"71.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"57.6","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"64658","name":"Night Tour MIAMI","description":null,"printName":"Night Tour","printText":"Departs from Senor frogs at 7:30pm and Central Station 8:00pm.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"19:30","toTime":"21:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"26.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"17.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"64570","name":"Classic Tour MIAMI","description":null,"printName":"Classic Tour ","printText":"1 Day all loops tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:15","toTime":"17:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"49.0","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"39.0","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"64571","name":"Premium Tour MIAMI","description":null,"printName":"Premium Tour ","printText":"1 Day All Loops Tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:15","toTime":"17:30"}],"category":[{"categoryName":"Child","prices":[{"amount":"53.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"62.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]},{"id":null,"name":" Europe","code":"EUR","cities":[{"id":null,"name":"Europe Time Zone","branches":[{"id":"16","name":"UAT-Rome","products":[{"id":"164498","name":"Premium Tour ROME","description":null,"printName":"Premium Tour ","printText":"Valid for 2 consecutive days on City Centre Loop & FREE WALKING TOURS Exclusive to Big Bus Rome Guests. # 1: Big Bus Stop Vatican at 12.00 - # 2 Big Bus Stop Vatican at 14.00 - # 3 Big Bus Stop Piazza Venezia at 15.30 - # 4 Big Bus Stop Barberini at 17.00 Enjoy your stay in Rome.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Apr-01","endPeriod":"Nov-01","fromTime":"08:30","toTime":"20:15"},{"startPeriod":"Nov-02","endPeriod":"Dec-31","fromTime":"09:00","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"35.1","currencyCode":"EUR"}]},{"categoryName":"Child","prices":[{"amount":"22.5","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"164497","name":"Classic Tour ROME","description":null,"printName":"Classic Tour ","printText":"City Centre Loop & FREE WALKING TOURS Exclusive to Big Bus Rome Guests. # 1: Big Bus Stop Vatican at 12.00 - # 2 Big Bus Stop Vatican at 14.00 - # 3 Big Bus Stop Piazza Venezia at 15.30 - # 4 Big Bus Stop Barberini at 17.00.Enjoy your stay in Rome.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Apr-01","endPeriod":"Nov-01","fromTime":"08:30","toTime":"20:15"},{"startPeriod":"Nov-02","endPeriod":"Dec-31","fromTime":"09:00","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"28.8","currencyCode":"EUR"}]},{"categoryName":"Child","prices":[{"amount":"18.9","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"164499","name":"Deluxe Tour ROME","description":null,"printName":"Deluxe Tour ","printText":"Valid for 3 consecutive days on City Centre Loop & FREE WALKING TOURS Exclusive to Big Bus Rome Guests. # 1: Big Bus Stop Vatican at 12.00 - # 2 Big Bus Stop Vatican at 14.00 - # 3 Big Bus Stop Piazza Venezia at 15.30 - # 4 Big Bus Stop Barberini at 17.00\nEnjoy your stay in Rome.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Apr-01","endPeriod":"Nov-01","fromTime":"08:30","toTime":"20:15"},{"startPeriod":"Nov-02","endPeriod":"Dec-31","fromTime":"09:00","toTime":"18:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"29.7","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"43.2","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"3","name":"UAT-Paris","products":[{"id":"34664","name":"Deluxe Tour PARIS","description":null,"printName":"Deluxe Tour ","printText":"Valid for 2 consecutive days","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"May-31","fromTime":"09:30","toTime":"17:15"},{"startPeriod":"Jun-01","endPeriod":"Jun-30","fromTime":"09:15","toTime":"18:30"},{"startPeriod":"Jul-01","endPeriod":"Aug-31","fromTime":"09:15","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"21.6","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"43.2","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"34665","name":"Night Tour PARIS","description":null,"printName":"Night Tour ","printText":"Panoramic Night Tour- Valid for 1 Tour  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"21:15","toTime":"23:15"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"20:15","toTime":"22:15"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"21:15","toTime":"23:15"},{"startPeriod":"Jan-05","endPeriod":"Mar-26","fromTime":"20:15","toTime":"22:15"},{"startPeriod":"Mar-26","endPeriod":"Oct-29","fromTime":"21:15","toTime":"23:15"}],"category":[{"categoryName":"Child","prices":[{"amount":"10.8","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"20.7","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"34500","name":"Classic Tour PARIS","description":null,"printName":"Classic Tour ","printText":"Valid 1 Day ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"May-31","fromTime":"09:30","toTime":"17:15"},{"startPeriod":"Jun-01","endPeriod":"Jun-30","fromTime":"09:15","toTime":"18:30"},{"startPeriod":"Jul-01","endPeriod":"Aug-31","fromTime":"09:15","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"15.3","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"31.5","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"34501","name":"Premium Tour PARIS","description":null,"printName":"Premium Tour ","printText":"Valid for 2 consecutive days","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"May-31","fromTime":"09:30","toTime":"17:15"},{"startPeriod":"Jun-01","endPeriod":"Jun-30","fromTime":"09:15","toTime":"18:30"},{"startPeriod":"Jul-01","endPeriod":"Aug-31","fromTime":"09:15","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"17:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"35.1","currencyCode":"EUR"}]},{"categoryName":"Child","prices":[{"amount":"18.0","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"8","name":"UAT-Vienna","products":[{"id":"84572","name":"Classic Tour VIENNA","description":null,"printName":"Classic Tour","printText":"Valid for 24 hours, All Routes & City walk. Enjoy your time in Vienna. incl. 10% VAT.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"09:30","toTime":"16:30"},{"startPeriod":"Mar-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Aug-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"16:30"}],"category":[{"categoryName":"Child","prices":[{"amount":"17.1","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"25.2","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"84661","name":"Deluxe Tour VIENNA","description":null,"printName":"Deluxe Tour ","printText":"Valid for 48 hours + 3rd Day FREE. All Routes, river cruise, City walk & Night Tour. Enjoy your time in Vienna. incl. 10% VAT","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"09:30","toTime":"16:30"},{"startPeriod":"Mar-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Aug-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"16:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"44.1","currencyCode":"EUR"}]},{"categoryName":"Child","prices":[{"amount":"28.8","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"84663","name":"Night Tour VIENNA","description":null,"printName":"Night Tour ","printText":"Tour starts from stop 1 \"Opera\". Enjoy your time in Vienna. incl. 10 % VAT","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Apr-01","endPeriod":"Sep-30","fromTime":"19:30","toTime":"20:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"15.3","currencyCode":"EUR"}]},{"categoryName":"Child","prices":[{"amount":"10.8","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"84573","name":"Premium Tour VIENNA","description":null,"printName":"Premium Tour ","printText":"Valid for 48 hours + 3rd Day FREE. All Routes, City walk & Night Tour. Enjoy your time in Vienna. incl. 10 % VAT","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"09:30","toTime":"16:30"},{"startPeriod":"Mar-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Aug-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"16:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"30.6","currencyCode":"EUR"},{"amount":"30.6","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"30.6","currencyCode":"EUR"},{"amount":"30.6","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"9","name":"UAT-Budapest","products":[{"id":"94897","name":"Night Tour BUDAPEST","description":null,"printName":"Night Tour BUDAPEST","printText":"Valid on one Night Tour starting at 19:30pm at the bus stop no.15. Not valid for Day Tour or Hop On Hop Off","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Mar-15","endPeriod":"Apr-30","fromTime":"19:00","toTime":"20:00"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"21:00","toTime":"22:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"19:00","toTime":"20:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"19:00","toTime":"20:00"},{"startPeriod":"Jan-01","endPeriod":"Jan-15","fromTime":"19:00","toTime":"20:00"},{"startPeriod":"Jan-15","endPeriod":"Mar-14","fromTime":"18:00","toTime":"19:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"4200.0","currencyCode":"HUF"}]},{"categoryName":"Adult","prices":[{"amount":"4200.0","currencyCode":"HUF"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"94866","name":"Deluxe Tour BUDAPEST","description":null,"printName":"Deluxe Tour ","printText":"Valid for 72 Hr on all Big Bus  Budapest Routes, Walking Tour, River Cruise ( Dock 11), Night Tour ( Stop 15) and Castle Shuttle (Operated by KNK Adventure KFT).\n Exch Rate 300 Huf. Enjoy your time in Budapest","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Mar-15","endPeriod":"Apr-30","fromTime":"09:00","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-01","endPeriod":"Jan-15","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-16","endPeriod":"Mar-14","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"6210.0","currencyCode":"HUF"}]},{"categoryName":"Adult","prices":[{"amount":"9990.0","currencyCode":"HUF"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"94865","name":"Premium Tour BUDAPEST","description":null,"printName":"Premium Tour ","printText":"Valid for 2 days hop-on hop-off bus tour, walking tour and river cruise valid for 48 Hr. Exchange Rate 300 HUF","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Mar-15","endPeriod":"Apr-30","fromTime":"09:00","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-01","endPeriod":"Jan-15","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-16","endPeriod":"Mar-14","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"4590.0","currencyCode":"HUF"}]},{"categoryName":"Adult","prices":[{"amount":"7290.0","currencyCode":"HUF"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"94864","name":"Classic Tour BUDAPEST","description":null,"printName":"Classic Tour ","printText":"Valid for 24 Hr on all Big Bus Budapest Routes and free walking tour.Enjoy your time in Budapest. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Mar-15","endPeriod":"Apr-30","fromTime":"09:00","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-01","endPeriod":"Jan-15","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-16","endPeriod":"Mar-14","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"3780.0","currencyCode":"HUF"}]},{"categoryName":"Adult","prices":[{"amount":"5940.0","currencyCode":"HUF"}]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]},{"id":null,"name":"United Arab Emirates","code":"ARE","cities":[{"id":null,"name":"Dubai (+4 hours)","branches":[{"id":"11","name":"UAT-Dubai","products":[{"id":"114559","name":"Night Tour DUBAI","description":null,"printName":"Night Tour ","printText":"Night Tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"19:15","toTime":"21:15"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"19:25","toTime":"21:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"19:15","toTime":"21:15"}],"category":[{"categoryName":"Adult","prices":[{"amount":"166.5","currencyCode":"AED"}]},{"categoryName":"Child","prices":[{"amount":"108.0","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"11111","name":"Aquaventure Waterpark","description":null,"printName":"Aquaventure Waterpark","printText":"","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Attractions","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"114556","name":"Classic Tour DUBAI","description":null,"printName":"Classic ","printText":"Ticket includes: Big Bus Dubai Hop On Hop Off 1 Day Tour, Dubai Creek Arabian Dhow Cruise, Dubai Marina RTA Water Bus, Dubai Museum, Shingdagha Museum, Museum Collection.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:50","toTime":"20:20"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"19:20"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:50","toTime":"20:20"}],"category":[{"categoryName":"Child","prices":[{"amount":"156.6","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"245.7","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"114557","name":"Premium Tour DUBAI","description":null,"printName":"Premium Tour ","printText":"Ticket includes: Big Bus Dubai Hop On Hop Off 2 Day Tour, Dubai Creek Arabian Dhow Cruise, Dubai Marina RTA Water Bus, Dubai Museum, Shingdagha Museum, Museum Collection.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:50","toTime":"20:20"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"19:20"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:50","toTime":"20:20"}],"category":[{"categoryName":"Child","prices":[{"amount":"181.8","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"282.6","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"114558","name":"Deluxe Tour DUBAI","description":null,"printName":"Deluxe Tour ","printText":"Ticket Includes: Big Bus Hop On Hop Off 3 Day Tour*, Desert Sunset Experience, A Magical Night Tour Journey, Atlantis the Palm Lost Chambers Aquarium**, Marina & Island Lagoon Boat Cruise, Palm Island Drive, Dubai Museum @ Al Fahidi Fort, Flamingo Lagoon Discovery, Shindagha Museum, Museum Collection, Arabian Dhow Cruise Dubai Creek, Big Bus Sharjah (Half Day Tour), Ambassador Lagoon @ Atlantis the Palm**, Dubai Marina RTA Water Bus, Heritage Village Walking Tour, Arabian Treasures Walking Tour, Downtown Discovery Walk","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:50","toTime":"20:20"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"19:20"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:50","toTime":"20:20"}],"category":[{"categoryName":"Child","prices":[{"amount":"222.3","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"339.3","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"12","name":"UAT-Abu Dhabi","products":[{"id":"124562","name":"Premium Tour ABU DHABI","description":null,"printName":"Premium Tour ","printText":"Valid for 2 Days","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:50","toTime":"20:20"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"19:20"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:50","toTime":"20:20"}],"category":[{"categoryName":"Child","prices":[{"amount":"181.8","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"282.6","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"124666","name":"Deluxe Tour ABU DHABI","description":null,"printName":"Deluxe Tour ","printText":"Hop-on Hop-off Valid for 2 Days.Big City Pass Valid for 7 Days,20  Tops Attractions (see brochure for details)\nConditions apply!","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"09:00","toTime":"20:00"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"20:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"20:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"222.3","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"339.3","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"124667","name":"Night Tour ABU DHABI","description":null,"printName":"Night Tour ","printText":"Night Tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"19:30","toTime":"21:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"166.5","currencyCode":"AED"}]},{"categoryName":"Child","prices":[{"amount":"108.0","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"124560","name":"Classic Tour ABU DHABI","description":null,"printName":"Classic Tour ","printText":"Classic Tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:50","toTime":"20:20"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"19:20"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:50","toTime":"20:20"}],"category":[{"categoryName":"Child","prices":[{"amount":"156.6","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"245.7","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"20","name":"UAT-Muscat","products":[{"id":"205003","name":"Classic Tour MUSCAT","description":null,"printName":"Classic","printText":" Valid for 1 Day open-top sightseeing bus tour.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"205005","name":"Premium Tour MUSCAT","description":null,"printName":"Premium","printText":"Valid for 2 days open-top sightseeing bus tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]},{"id":null,"name":"United Kingdom","code":"GBR","cities":[{"id":null,"name":"London GMT","branches":[{"id":"1","name":"UAT-London","products":[{"id":"14489","name":"Premium Tour LONDON","description":null,"printName":"Premium 2 Day","printText":"Valid for 48 Hours Hop On Hop Off. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:30","toTime":"16:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:30","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:30","toTime":"17:30"}],"category":[{"categoryName":"Child","prices":[{"amount":"19.8","currencyCode":"GBP"}]},{"categoryName":"Adult","prices":[{"amount":"39.6","currencyCode":"GBP"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"14488","name":"Classic Tour LONDON","description":null,"printName":"Classic 1 Day","printText":"Valid for 24 Hours. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:30","toTime":"16:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:30","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:30","toTime":"17:30"}],"category":[{"categoryName":"Child","prices":[{"amount":"17.1","currencyCode":"GBP"}]},{"categoryName":"Adult","prices":[{"amount":"33.3","currencyCode":"GBP"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"14660","name":"Deluxe Tour LONDON","description":null,"printName":"Deluxe 3 Day","printText":"Ticket valid for 72 Hours Hop On Hop Off.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:30","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:30","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:30","toTime":"17:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"16:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"45.0","currencyCode":"GBP"}]},{"categoryName":"Child","prices":[{"amount":"22.5","currencyCode":"GBP"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"14751","name":" Night Tour LONDON","description":null,"printName":"Panoramic Night Tour","printText":"Panoramic Night tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]},{"id":null,"name":"China","code":"CHN","cities":[{"id":null,"name":"Hong Kong","branches":[{"id":"13","name":"UAT-Hong Kong","products":[{"id":"134750","name":"Night Tour HONG KONG","description":null,"printName":"Night Tour ","printText":"Night Tour ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"134508","name":"Premium Tour HONG KONG","description":null,"printName":"Premium","printText":"Premium Ticket Valid for 2 days","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"18:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"459.0","currencyCode":"HKD"}]},{"categoryName":"Adult","prices":[{"amount":"504.0","currencyCode":"HKD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"134697","name":"Deluxe Tour HONG KONG","description":null,"printName":"Deluxe","printText":"Deluxe Ticket is valid for 2 days","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"134507","name":"Classic Tour HONG KONG","description":null,"printName":"Classic ","printText":"Classic Ticket Valid for 1 day","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"18:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"387.0","currencyCode":"HKD"}]},{"categoryName":"Adult","prices":[{"amount":"432.0","currencyCode":"HKD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"13210","name":"Single Route Voucher","description":null,"printName":"Single Route Voucher","printText":"(HK ISLAND / KOWLOON / STANLEY / NIGHT)","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]},{"id":null,"name":"Australia","code":"AUS","cities":[{"id":null,"name":"Sydney","branches":[{"id":"19","name":"UAT-Sydney","products":[{"id":"194595","name":"Deluxe Tour SYDNEY","description":null,"printName":"Deluxe","printText":"Valid for 48 Hr hop On Hop Off\nGST inc in above amout: $??\nTAX INV ABN49086726329","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"18:00"},{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"18:00"},{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"89.1","currencyCode":"AUD"}]},{"categoryName":"Child","prices":[{"amount":"63.0","currencyCode":"AUD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"194593","name":"Classic Tour SYDNEY","description":null,"printName":"Classic","printText":"Valid for 24 Hr Hop On Hop Off\nGST inc in above amout: $??\nTAX INV ABN49086726329","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"08:30","toTime":"17:00"},{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"08:30","toTime":"17:00"},{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"08:30","toTime":"17:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"45.0","currencyCode":"AUD"}]},{"categoryName":"Child","prices":[{"amount":"31.5","currencyCode":"AUD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"194594","name":"Premium Tour SYDNEY","description":null,"printName":"Premium","printText":"Valid for 48 Hr Hop On Hop Off\nGST inc in above amout: $??\nTAX INV ABN49086726329","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"63.0","currencyCode":"AUD"}]},{"categoryName":"Child","prices":[{"amount":"41.4","currencyCode":"AUD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]}]}}]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>dbd488ac-9620-4c99-af7c-99d63d0bc9cd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>d90969e7-a33c-460e-9cdc-3816b9d68552</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>ead8b2fb-d67e-4b22-905e-95adb82af015</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>83d4de21-ba63-40d4-afed-6c997e5911ab</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>bbbc8e6e-65e8-422f-a409-6fb20478bda7</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3fcd0f29-d7b8-4a28-94f2-0468da71094d</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>8518b70e-365e-4a0f-9bdf-48dbd2d67621</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>c3f378f4-df17-48b9-be64-5a0d642982d1</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b4de7c2e-2d12-4605-a90c-96b5dd046115</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="142aea16-7a12-40da-a86b-0ac94323c39a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ProductList_ID" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>TestCase generated for REST Resource ProductList</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="7e4240d8-0034-4286-82e7-2f88b2a7d465">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_ProductListTestdata.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Products\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>ID</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_ProductListTestdata</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="a5bfa686-a19c-4ff8-982d-7cf0c7e1cacf">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>ID</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>TestCase</con:property>
          <con:property>Description (Optional)</con:property>
          <con:property>authorization</con:property>
          <con:property>contentType</con:property>
          <con:property>countryCode</con:property>
          <con:property>branchId</con:property>
          <con:property>productType</con:property>
          <con:property>cityId</con:property>
          <con:property>supplierId</con:property>
          <con:property>Expected Result</con:property>
          <con:property>Actual Reslult</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="3cd0beba-be74-4e55-921f-2e1b3a012e2f">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/products" methodName="Products" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
              <con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request/>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="3516f642-2dad-44d5-bba9-a91df92acd4a">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>message</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="9dd00eba-7a0b-41e6-a577-cdbfe95eb81b">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="1521ec7f-7794-4700-84f3-aadea66cbbed">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A14</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="b4fa4c63-b91b-4c5d-aa1b-e6a353893722">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">null</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value><![CDATA[{"status":"SUCCESS","code":null,"message":null,"productResult":{"countries":[{"id":null,"name":"USA","code":"USA","cities":[{"id":null,"name":"USA -8 hours","branches":[{"id":"5","name":"UAT-San Francisco","products":[{"id":"54493","name":"Classic Tour SAN FRANCISCO","description":null,"printName":"Classic Tour ","printText":"Daily Tours from 9:00am - 5:00pm. Last bus departs Stop 1 at 5:00pm. Ticket valid for One Day Hop-on Hop-Tour and Walking Tours. Tour operates rain or shine. All sales are final. No refunds or exchanges.  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"36.0","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"46.8","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"54495","name":"Deluxe Tour SAN FRANCISCO","description":null,"printName":"Deluxe Tour ","printText":"Daily Tours from 9:00am - 5:00pm. Last bus departs Stop 1 at 5:00pm. Ticket valid for Two Day Hop-on Hop-Tour, Walking Tours & Night Tour (Except May 24th 2017). Tour operates rain or shine. All sales are final. No refunds or exchanges.  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"67.5","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"54.0","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"54496","name":"Night Tour SAN FRANCISCO","description":null,"printName":"Night Tour ","printText":"Daily at 6:30pm, 7:00pm & (7:30pm April - October) Arrive 30 minutes prior to desired tour time as seats are first come first serve. Tour operates rain or shine. All sales are final. No refunds of exchanges.  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"18:30","toTime":"21:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"18:30","toTime":"21:00"},{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"18:30","toTime":"21:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"27.0","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"18.0","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"54494","name":"Premium Tour SAN FRANCISCO","description":null,"printName":"Premium Tour ","printText":"Daily Tours from 9:00am - 5:00pm. Last bus departs Stop 1 at 5:00pm. Ticket valid for One Day Hop-on Hop-Tour & Walking Tours . Tour operates rain or shine. All sales are final. No refunds or exchanges.  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"46.8","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"58.5","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"7","name":"UAT-Las Vegas","products":[{"id":"74505","name":"Deluxe Tour LAS VEGAS","description":null,"printName":"Deluxe","printText":"Valid for 3 days hop on hop off 10 am to 6 pm daily. If purchased or redeemed after 3 PM,this ticket is valid until the same time 3 days from now. THIS TICKET INCLUDES STATE PASSENGER TAX.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"10:00","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"67.5","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"53.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"74506","name":"Night Tour LAS VEGAS","description":null,"printName":"Panoramic Night Tour","printText":"Must be used within 24 hours after purchase. THIS TICKET INCLUDES STATE PASSENGER TAX.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"19:00","toTime":"10:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"35.0","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"45.0","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"74503","name":"Classic Tour LAS VEGAS","description":null,"printName":"Classic","printText":"Valid for one day hop on hop off tour 10 am to 6 pm daily. THIS TICKET INCLUDES STATE PASSENGER TAX.  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"10:00","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"44.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"35.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"74504","name":"Premium Tour LAS VEGAS","description":null,"printName":"Premium","printText":"Valid for 2 days  hop on hop off 10 am to 6 pm daily. If purchased or redeemed after 3 PM,this ticket is valid until the same time 2 days from now. THIS TICKET INCLUDES STATE PASSENGER TAX.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"10:00","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"53.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"44.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]}]},{"id":null,"name":"USA -6 hours","branches":[{"id":"15","name":"UAT-Chicago","products":[{"id":"154565","name":"Premium Tour CHICAGO","description":null,"printName":"Premium Tour ","printText":"Valid for 2 day on the date of purchase.If purchased after 3 PM this ticket is valid for the next day.Want to explore more? Upgrade your ticket with a member of our staff.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"10:00","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"09:00","toTime":"16:00"},{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-30","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"27.0","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"49.5","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"154656","name":"Night Tour CHICAGO","description":null,"printName":"Night Tour ","printText":"Live Guided, Panoramic, Non-Stop Night Tour of Chicago. Departs from Navy Pier (stop 11) Nightly at 7.00pm","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"19:45","toTime":"22:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"19:45","toTime":"22:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"26.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"13.5","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"154564","name":"Classic Tour CHICAGO","description":null,"printName":"Classic Tour ","printText":"Valid for one day on the date of purchase.If purchase after 3PM,ticket is valid for the next day.Want to explore more? Upgrade your ticket with a member of the staff.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"10:00","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"09:00","toTime":"16:00"},{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-30","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"40.5","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"22.5","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"154655","name":"Deluxe Tour CHICAGO","description":null,"printName":"Deluxe Tour ","printText":"Valid for 2 day on the date of purchase.If purchased after 3 PM this ticket is valid for the next day.Want to explore more? Upgrade your ticket with a member of our staff.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"10:00","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"09:00","toTime":"16:00"},{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-30","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"31.5","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"58.5","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]}]},{"id":null,"name":"USA -5 hours","branches":[{"id":"2","name":"UAT-New York","products":[{"id":"24659","name":"Night Tour NEW YORK","description":null,"printName":"Night Tour ","printText":"Valid for a single Night Tour. Departs from Stop#18- M&M World from 7pm to 9pm every 30min. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"18:00","toTime":"20:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"19:00","toTime":"21:00"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"19:00","toTime":"21:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"18:00","toTime":"20:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"18:00","toTime":"20:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"35.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"44.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"24490","name":"Classic Tour NEW YORK","description":null,"printName":"Classic","printText":"If purchased or redeemed after 3pm this ticket is valid until the same time the next day. This ticket is valid on the Downtown and Uptown Loops. Last departure for Uptown and Downtown is at 5pm. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:00","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"44.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"53.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"24511","name":"Deluxe Tour NEW YORK","description":null,"printName":"Deluxe Tour ","printText":"Valid for 2 days. If purchased or redeemed after 3PM, this ticket is valid until the same time 2 days from now. This ticket is valid on the Uptown, Downtown, Harlem, Brooklyn Loops and Night Tours as well as a Sightseeing Cruise. Last depature for the Uptown and Downtown  is at 5PM. Last depature for the Brooklyn and Harlem Loop is 3PM. Want more? Please ask an agent about upgrades.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:00","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"62.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"80.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"24491","name":"Premium Tour NEW YORK","description":null,"printName":"2 Day Premium","printText":"Valid for 2 Days. If purchased or redeemed after 3pm this ticket is valid until the same time 2 days from now.This ticket is valid on the Downtown, Midtown, Uptown and the Brooklyn Tours. . Last departure for Uptown and Downtown is at 5pm. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:00","toTime":"17:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:00","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"53.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"62.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"4","name":"UAT-Washington DC","products":[{"id":"44569","name":"Panoramic Night Tour WASHINGTON DC","description":null,"printName":"Panoramic Night Tour ","printText":"Valid for one Night Tour. See current brochure for departure time.\n","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-12","fromTime":"18:30","toTime":"20:30"},{"startPeriod":"Mar-13","endPeriod":"May-25","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"May-26","endPeriod":"Sep-04","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"Sep-05","endPeriod":"Dec-31","fromTime":"18:30","toTime":"20:30"}],"category":[{"categoryName":"Child","prices":[{"amount":"26.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"35.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"44567","name":"Premium Tour WASHINGTON DC","description":null,"printName":"Premium Tour ","printText":"Valid for 1 day on all Loops","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-12","fromTime":"09:00","toTime":"16:00"},{"startPeriod":"Mar-13","endPeriod":"May-25","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"May-26","endPeriod":"Sep-04","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Sep-05","endPeriod":"Dec-31","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"26.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"44.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"44568","name":"Deluxe Tour WASHINGTON DC","description":null,"printName":"Deluxe Tour ","printText":"Valid for 2 days on all Loops","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-12","fromTime":"09:00","toTime":"16:00"},{"startPeriod":"Mar-13","endPeriod":"May-25","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"May-26","endPeriod":"Sep-04","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Sep-05","endPeriod":"Dec-31","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"62.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"44.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"6","name":"UAT-Miami","products":[{"id":"64657","name":"Deluxe Tour MIAMI","description":null,"printName":"Deluxe Tour ","printText":"2 Days all Loops Tour, Biscayne Boat and Night Tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:15","toTime":"17:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"71.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"57.6","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"64658","name":"Night Tour MIAMI","description":null,"printName":"Night Tour","printText":"Departs from Senor frogs at 7:30pm and Central Station 8:00pm.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"19:30","toTime":"21:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"26.1","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"17.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"64570","name":"Classic Tour MIAMI","description":null,"printName":"Classic Tour ","printText":"1 Day all loops tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:15","toTime":"17:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"49.0","currencyCode":"USD"}]},{"categoryName":"Child","prices":[{"amount":"39.0","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"64571","name":"Premium Tour MIAMI","description":null,"printName":"Premium Tour ","printText":"1 Day All Loops Tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"08:15","toTime":"17:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:15","toTime":"17:30"}],"category":[{"categoryName":"Child","prices":[{"amount":"53.1","currencyCode":"USD"}]},{"categoryName":"Adult","prices":[{"amount":"62.1","currencyCode":"USD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]},{"id":null,"name":" Europe","code":"EUR","cities":[{"id":null,"name":"Europe Time Zone","branches":[{"id":"16","name":"UAT-Rome","products":[{"id":"164498","name":"Premium Tour ROME","description":null,"printName":"Premium Tour ","printText":"Valid for 2 consecutive days on City Centre Loop & FREE WALKING TOURS Exclusive to Big Bus Rome Guests. # 1: Big Bus Stop Vatican at 12.00 - # 2 Big Bus Stop Vatican at 14.00 - # 3 Big Bus Stop Piazza Venezia at 15.30 - # 4 Big Bus Stop Barberini at 17.00 Enjoy your stay in Rome.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Apr-01","endPeriod":"Nov-01","fromTime":"08:30","toTime":"20:15"},{"startPeriod":"Nov-02","endPeriod":"Dec-31","fromTime":"09:00","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"35.1","currencyCode":"EUR"}]},{"categoryName":"Child","prices":[{"amount":"22.5","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"164497","name":"Classic Tour ROME","description":null,"printName":"Classic Tour ","printText":"City Centre Loop & FREE WALKING TOURS Exclusive to Big Bus Rome Guests. # 1: Big Bus Stop Vatican at 12.00 - # 2 Big Bus Stop Vatican at 14.00 - # 3 Big Bus Stop Piazza Venezia at 15.30 - # 4 Big Bus Stop Barberini at 17.00.Enjoy your stay in Rome.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Apr-01","endPeriod":"Nov-01","fromTime":"08:30","toTime":"20:15"},{"startPeriod":"Nov-02","endPeriod":"Dec-31","fromTime":"09:00","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"28.8","currencyCode":"EUR"}]},{"categoryName":"Child","prices":[{"amount":"18.9","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"164499","name":"Deluxe Tour ROME","description":null,"printName":"Deluxe Tour ","printText":"Valid for 3 consecutive days on City Centre Loop & FREE WALKING TOURS Exclusive to Big Bus Rome Guests. # 1: Big Bus Stop Vatican at 12.00 - # 2 Big Bus Stop Vatican at 14.00 - # 3 Big Bus Stop Piazza Venezia at 15.30 - # 4 Big Bus Stop Barberini at 17.00\nEnjoy your stay in Rome.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Apr-01","endPeriod":"Nov-01","fromTime":"08:30","toTime":"20:15"},{"startPeriod":"Nov-02","endPeriod":"Dec-31","fromTime":"09:00","toTime":"18:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"29.7","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"43.2","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"3","name":"UAT-Paris","products":[{"id":"34664","name":"Deluxe Tour PARIS","description":null,"printName":"Deluxe Tour ","printText":"Valid for 2 consecutive days","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"May-31","fromTime":"09:30","toTime":"17:15"},{"startPeriod":"Jun-01","endPeriod":"Jun-30","fromTime":"09:15","toTime":"18:30"},{"startPeriod":"Jul-01","endPeriod":"Aug-31","fromTime":"09:15","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"21.6","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"43.2","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"34665","name":"Night Tour PARIS","description":null,"printName":"Night Tour ","printText":"Panoramic Night Tour- Valid for 1 Tour  ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"21:15","toTime":"23:15"},{"startPeriod":"Apr-01","endPeriod":"Oct-31","fromTime":"20:15","toTime":"22:15"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"21:15","toTime":"23:15"},{"startPeriod":"Jan-05","endPeriod":"Mar-26","fromTime":"20:15","toTime":"22:15"},{"startPeriod":"Mar-26","endPeriod":"Oct-29","fromTime":"21:15","toTime":"23:15"}],"category":[{"categoryName":"Child","prices":[{"amount":"10.8","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"20.7","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"34500","name":"Classic Tour PARIS","description":null,"printName":"Classic Tour ","printText":"Valid 1 Day ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"May-31","fromTime":"09:30","toTime":"17:15"},{"startPeriod":"Jun-01","endPeriod":"Jun-30","fromTime":"09:15","toTime":"18:30"},{"startPeriod":"Jul-01","endPeriod":"Aug-31","fromTime":"09:15","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"17:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"15.3","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"31.5","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"34501","name":"Premium Tour PARIS","description":null,"printName":"Premium Tour ","printText":"Valid for 2 consecutive days","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"May-31","fromTime":"09:30","toTime":"17:15"},{"startPeriod":"Jun-01","endPeriod":"Jun-30","fromTime":"09:15","toTime":"18:30"},{"startPeriod":"Jul-01","endPeriod":"Aug-31","fromTime":"09:15","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"17:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"35.1","currencyCode":"EUR"}]},{"categoryName":"Child","prices":[{"amount":"18.0","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"8","name":"UAT-Vienna","products":[{"id":"84572","name":"Classic Tour VIENNA","description":null,"printName":"Classic Tour","printText":"Valid for 24 hours, All Routes & City walk. Enjoy your time in Vienna. incl. 10% VAT.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"09:30","toTime":"16:30"},{"startPeriod":"Mar-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Aug-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"16:30"}],"category":[{"categoryName":"Child","prices":[{"amount":"17.1","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"25.2","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"84661","name":"Deluxe Tour VIENNA","description":null,"printName":"Deluxe Tour ","printText":"Valid for 48 hours + 3rd Day FREE. All Routes, river cruise, City walk & Night Tour. Enjoy your time in Vienna. incl. 10% VAT","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"09:30","toTime":"16:30"},{"startPeriod":"Mar-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Aug-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"16:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"44.1","currencyCode":"EUR"}]},{"categoryName":"Child","prices":[{"amount":"28.8","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"84663","name":"Night Tour VIENNA","description":null,"printName":"Night Tour ","printText":"Tour starts from stop 1 \"Opera\". Enjoy your time in Vienna. incl. 10 % VAT","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Apr-01","endPeriod":"Sep-30","fromTime":"19:30","toTime":"20:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"15.3","currencyCode":"EUR"}]},{"categoryName":"Child","prices":[{"amount":"10.8","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"84573","name":"Premium Tour VIENNA","description":null,"printName":"Premium Tour ","printText":"Valid for 48 hours + 3rd Day FREE. All Routes, City walk & Night Tour. Enjoy your time in Vienna. incl. 10 % VAT","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"09:30","toTime":"16:30"},{"startPeriod":"Mar-01","endPeriod":"Mar-31","fromTime":"09:30","toTime":"17:00"},{"startPeriod":"Apr-01","endPeriod":"Aug-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"09:30","toTime":"18:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"16:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"30.6","currencyCode":"EUR"},{"amount":"30.6","currencyCode":"EUR"}]},{"categoryName":"Adult","prices":[{"amount":"30.6","currencyCode":"EUR"},{"amount":"30.6","currencyCode":"EUR"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"9","name":"UAT-Budapest","products":[{"id":"94897","name":"Night Tour BUDAPEST","description":null,"printName":"Night Tour BUDAPEST","printText":"Valid on one Night Tour starting at 19:30pm at the bus stop no.15. Not valid for Day Tour or Hop On Hop Off","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Mar-15","endPeriod":"Apr-30","fromTime":"19:00","toTime":"20:00"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"21:00","toTime":"22:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"19:00","toTime":"20:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"19:00","toTime":"20:00"},{"startPeriod":"Jan-01","endPeriod":"Jan-15","fromTime":"19:00","toTime":"20:00"},{"startPeriod":"Jan-15","endPeriod":"Mar-14","fromTime":"18:00","toTime":"19:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"4200.0","currencyCode":"HUF"}]},{"categoryName":"Adult","prices":[{"amount":"4200.0","currencyCode":"HUF"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"94866","name":"Deluxe Tour BUDAPEST","description":null,"printName":"Deluxe Tour ","printText":"Valid for 72 Hr on all Big Bus  Budapest Routes, Walking Tour, River Cruise ( Dock 11), Night Tour ( Stop 15) and Castle Shuttle (Operated by KNK Adventure KFT).\n Exch Rate 300 Huf. Enjoy your time in Budapest","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Mar-15","endPeriod":"Apr-30","fromTime":"09:00","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-01","endPeriod":"Jan-15","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-16","endPeriod":"Mar-14","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"6210.0","currencyCode":"HUF"}]},{"categoryName":"Adult","prices":[{"amount":"9990.0","currencyCode":"HUF"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"94865","name":"Premium Tour BUDAPEST","description":null,"printName":"Premium Tour ","printText":"Valid for 2 days hop-on hop-off bus tour, walking tour and river cruise valid for 48 Hr. Exchange Rate 300 HUF","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Mar-15","endPeriod":"Apr-30","fromTime":"09:00","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-01","endPeriod":"Jan-15","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-16","endPeriod":"Mar-14","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"4590.0","currencyCode":"HUF"}]},{"categoryName":"Adult","prices":[{"amount":"7290.0","currencyCode":"HUF"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"94864","name":"Classic Tour BUDAPEST","description":null,"printName":"Classic Tour ","printText":"Valid for 24 Hr on all Big Bus Budapest Routes and free walking tour.Enjoy your time in Budapest. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Mar-15","endPeriod":"Apr-30","fromTime":"09:00","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Sep-01","endPeriod":"Sep-30","fromTime":"09:00","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"17:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-01","endPeriod":"Jan-15","fromTime":"09:00","toTime":"16:30"},{"startPeriod":"Jan-16","endPeriod":"Mar-14","fromTime":"09:00","toTime":"16:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"3780.0","currencyCode":"HUF"}]},{"categoryName":"Adult","prices":[{"amount":"5940.0","currencyCode":"HUF"}]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]},{"id":null,"name":"United Arab Emirates","code":"ARE","cities":[{"id":null,"name":"Dubai (+4 hours)","branches":[{"id":"11","name":"UAT-Dubai","products":[{"id":"114559","name":"Night Tour DUBAI","description":null,"printName":"Night Tour ","printText":"Night Tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"19:15","toTime":"21:15"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"19:25","toTime":"21:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"19:15","toTime":"21:15"}],"category":[{"categoryName":"Adult","prices":[{"amount":"166.5","currencyCode":"AED"}]},{"categoryName":"Child","prices":[{"amount":"108.0","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"11111","name":"Aquaventure Waterpark","description":null,"printName":"Aquaventure Waterpark","printText":"","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Attractions","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"114556","name":"Classic Tour DUBAI","description":null,"printName":"Classic ","printText":"Ticket includes: Big Bus Dubai Hop On Hop Off 1 Day Tour, Dubai Creek Arabian Dhow Cruise, Dubai Marina RTA Water Bus, Dubai Museum, Shingdagha Museum, Museum Collection.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:50","toTime":"20:20"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"19:20"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:50","toTime":"20:20"}],"category":[{"categoryName":"Child","prices":[{"amount":"156.6","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"245.7","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"114557","name":"Premium Tour DUBAI","description":null,"printName":"Premium Tour ","printText":"Ticket includes: Big Bus Dubai Hop On Hop Off 2 Day Tour, Dubai Creek Arabian Dhow Cruise, Dubai Marina RTA Water Bus, Dubai Museum, Shingdagha Museum, Museum Collection.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:50","toTime":"20:20"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"19:20"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:50","toTime":"20:20"}],"category":[{"categoryName":"Child","prices":[{"amount":"181.8","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"282.6","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"114558","name":"Deluxe Tour DUBAI","description":null,"printName":"Deluxe Tour ","printText":"Ticket Includes: Big Bus Hop On Hop Off 3 Day Tour*, Desert Sunset Experience, A Magical Night Tour Journey, Atlantis the Palm Lost Chambers Aquarium**, Marina & Island Lagoon Boat Cruise, Palm Island Drive, Dubai Museum @ Al Fahidi Fort, Flamingo Lagoon Discovery, Shindagha Museum, Museum Collection, Arabian Dhow Cruise Dubai Creek, Big Bus Sharjah (Half Day Tour), Ambassador Lagoon @ Atlantis the Palm**, Dubai Marina RTA Water Bus, Heritage Village Walking Tour, Arabian Treasures Walking Tour, Downtown Discovery Walk","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:50","toTime":"20:20"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"19:20"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:50","toTime":"20:20"}],"category":[{"categoryName":"Child","prices":[{"amount":"222.3","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"339.3","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"12","name":"UAT-Abu Dhabi","products":[{"id":"124562","name":"Premium Tour ABU DHABI","description":null,"printName":"Premium Tour ","printText":"Valid for 2 Days","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:50","toTime":"20:20"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"19:20"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:50","toTime":"20:20"}],"category":[{"categoryName":"Child","prices":[{"amount":"181.8","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"282.6","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"124666","name":"Deluxe Tour ABU DHABI","description":null,"printName":"Deluxe Tour ","printText":"Hop-on Hop-off Valid for 2 Days.Big City Pass Valid for 7 Days,20  Tops Attractions (see brochure for details)\nConditions apply!","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"09:00","toTime":"20:00"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"20:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"20:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"222.3","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"339.3","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"124667","name":"Night Tour ABU DHABI","description":null,"printName":"Night Tour ","printText":"Night Tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"19:30","toTime":"21:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"19:30","toTime":"21:30"}],"category":[{"categoryName":"Adult","prices":[{"amount":"166.5","currencyCode":"AED"}]},{"categoryName":"Child","prices":[{"amount":"108.0","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"124560","name":"Classic Tour ABU DHABI","description":null,"printName":"Classic Tour ","printText":"Classic Tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:50","toTime":"20:20"},{"startPeriod":"May-01","endPeriod":"Oct-31","fromTime":"09:00","toTime":"19:20"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:50","toTime":"20:20"}],"category":[{"categoryName":"Child","prices":[{"amount":"156.6","currencyCode":"AED"}]},{"categoryName":"Adult","prices":[{"amount":"245.7","currencyCode":"AED"}]}],"supplierID":"BBC","hasManagedCapacity":false}]},{"id":"20","name":"UAT-Muscat","products":[{"id":"205003","name":"Classic Tour MUSCAT","description":null,"printName":"Classic","printText":" Valid for 1 Day open-top sightseeing bus tour.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"205005","name":"Premium Tour MUSCAT","description":null,"printName":"Premium","printText":"Valid for 2 days open-top sightseeing bus tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]},{"id":null,"name":"United Kingdom","code":"GBR","cities":[{"id":null,"name":"London GMT","branches":[{"id":"1","name":"UAT-London","products":[{"id":"14489","name":"Premium Tour LONDON","description":null,"printName":"Premium 2 Day","printText":"Valid for 48 Hours Hop On Hop Off. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:30","toTime":"16:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:30","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:30","toTime":"17:30"}],"category":[{"categoryName":"Child","prices":[{"amount":"19.8","currencyCode":"GBP"}]},{"categoryName":"Adult","prices":[{"amount":"39.6","currencyCode":"GBP"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"14488","name":"Classic Tour LONDON","description":null,"printName":"Classic 1 Day","printText":"Valid for 24 Hours. ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:30","toTime":"16:00"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:30","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:30","toTime":"17:30"}],"category":[{"categoryName":"Child","prices":[{"amount":"17.1","currencyCode":"GBP"}]},{"categoryName":"Adult","prices":[{"amount":"33.3","currencyCode":"GBP"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"14660","name":"Deluxe Tour LONDON","description":null,"printName":"Deluxe 3 Day","printText":"Ticket valid for 72 Hours Hop On Hop Off.","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Feb-28","fromTime":"08:30","toTime":"16:00"},{"startPeriod":"Mar-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"17:30"},{"startPeriod":"May-01","endPeriod":"Aug-31","fromTime":"08:30","toTime":"19:00"},{"startPeriod":"Sep-01","endPeriod":"Oct-31","fromTime":"08:30","toTime":"17:30"},{"startPeriod":"Nov-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"16:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"45.0","currencyCode":"GBP"}]},{"categoryName":"Child","prices":[{"amount":"22.5","currencyCode":"GBP"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"14751","name":" Night Tour LONDON","description":null,"printName":"Panoramic Night Tour","printText":"Panoramic Night tour","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]},{"id":null,"name":"China","code":"CHN","cities":[{"id":null,"name":"Hong Kong","branches":[{"id":"13","name":"UAT-Hong Kong","products":[{"id":"134750","name":"Night Tour HONG KONG","description":null,"printName":"Night Tour ","printText":"Night Tour ","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"134508","name":"Premium Tour HONG KONG","description":null,"printName":"Premium","printText":"Premium Ticket Valid for 2 days","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"18:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"459.0","currencyCode":"HKD"}]},{"categoryName":"Adult","prices":[{"amount":"504.0","currencyCode":"HKD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"134697","name":"Deluxe Tour HONG KONG","description":null,"printName":"Deluxe","printText":"Deluxe Ticket is valid for 2 days","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"134507","name":"Classic Tour HONG KONG","description":null,"printName":"Classic ","printText":"Classic Ticket Valid for 1 day","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:30","toTime":"18:00"}],"category":[{"categoryName":"Child","prices":[{"amount":"387.0","currencyCode":"HKD"}]},{"categoryName":"Adult","prices":[{"amount":"432.0","currencyCode":"HKD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"13210","name":"Single Route Voucher","description":null,"printName":"Single Route Voucher","printText":"(HK ISLAND / KOWLOON / STANLEY / NIGHT)","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Dec-31","fromTime":"09:00","toTime":"17:00"}],"category":[{"categoryName":null,"prices":[]},{"categoryName":null,"prices":[]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]},{"id":null,"name":"Australia","code":"AUS","cities":[{"id":null,"name":"Sydney","branches":[{"id":"19","name":"UAT-Sydney","products":[{"id":"194595","name":"Deluxe Tour SYDNEY","description":null,"printName":"Deluxe","printText":"Valid for 48 Hr hop On Hop Off\nGST inc in above amout: $??\nTAX INV ABN49086726329","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"18:00"},{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"18:00"},{"startPeriod":"Jan-01","endPeriod":"Apr-30","fromTime":"08:30","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"89.1","currencyCode":"AUD"}]},{"categoryName":"Child","prices":[{"amount":"63.0","currencyCode":"AUD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"194593","name":"Classic Tour SYDNEY","description":null,"printName":"Classic","printText":"Valid for 24 Hr Hop On Hop Off\nGST inc in above amout: $??\nTAX INV ABN49086726329","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"08:30","toTime":"17:00"},{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"08:30","toTime":"17:00"},{"startPeriod":"May-01","endPeriod":"Sep-30","fromTime":"08:30","toTime":"17:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"45.0","currencyCode":"AUD"}]},{"categoryName":"Child","prices":[{"amount":"31.5","currencyCode":"AUD"}]}],"supplierID":"BBC","hasManagedCapacity":false},{"id":"194594","name":"Premium Tour SYDNEY","description":null,"printName":"Premium","printText":"Valid for 48 Hr Hop On Hop Off\nGST inc in above amout: $??\nTAX INV ABN49086726329","image":"Logo","status":"active","productTypeID":"128","productTypename":"Tickets(Atraction)","productGroupID":null,"productGroupname":"Big Bus","operatingHours":[{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"18:00"},{"startPeriod":"Oct-01","endPeriod":"Dec-31","fromTime":"08:30","toTime":"18:00"}],"category":[{"categoryName":"Adult","prices":[{"amount":"63.0","currencyCode":"AUD"}]},{"categoryName":"Child","prices":[{"amount":"41.4","currencyCode":"AUD"}]}],"supplierID":"BBC","hasManagedCapacity":false}]}]}]}]}}]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>dbd488ac-9620-4c99-af7c-99d63d0bc9cd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>d90969e7-a33c-460e-9cdc-3816b9d68552</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>ead8b2fb-d67e-4b22-905e-95adb82af015</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>83d4de21-ba63-40d4-afed-6c997e5911ab</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>bbbc8e6e-65e8-422f-a409-6fb20478bda7</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3fcd0f29-d7b8-4a28-94f2-0468da71094d</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>8518b70e-365e-4a0f-9bdf-48dbd2d67621</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>c3f378f4-df17-48b9-be64-5a0d642982d1</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b4de7c2e-2d12-4605-a90c-96b5dd046115</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite id="c783f044-fe89-45c7-b7d9-0dd62a18f586" name="GetAvailabilities_TestSuite">
    <con:description>TestSuite generated for BigBus Empire State Integration REST Service</con:description>
    <con:settings/>
    <con:savedRecentRuns>1</con:savedRecentRuns>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="76cff5c6-3953-4f0c-a146-6ec4c715a478" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="availability_BMO" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="6f078953-efd8-4e49-801f-b256c56e2fda">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_AvailabilityTestdata.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Availability\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusESAvailability_TestData.xlsx</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="b139aac7-d8e6-4163-9028-f1ff947059d9">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>BMO</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>Test Case</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>EndPoint</con:property>
          <con:property>Resource</con:property>
          <con:property>Method</con:property>
          <con:property>Authorization</con:property>
          <con:property>productId</con:property>
          <con:property>fromDate</con:property>
          <con:property>toDate</con:property>
          <con:property>quantity</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="e8b867b7-b440-4c31-b9ac-0459d6cc5636">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/products/${#Project#id}/availability" methodName="Availability" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="704cd389-bb27-4b94-a9b6-a8317a693c06" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#Authorization}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request/>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/availability</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="fromDate" value="25-02-2019"/>
              <con:entry key="quantity" value="${DataSource#quantity}"/>
              <con:entry key="toDate" value="23-02-2019"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>fromDate</con:entry>
              <con:entry>toDate</con:entry>
              <con:entry>quantity</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="8ab99082-81fc-44ab-b164-a97b8e2a80a6">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>errorMessage</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="1355f298-5748-469e-8e0a-cf5753075002">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
log.info(location)
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#Test Case}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#Test Case}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
log.info(name)
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
log.info(Response)
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="44f47894-332f-4a7b-a773-5583eac82322">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A4</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#Test Case}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#Project#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#Project#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#Project#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="85433bf0-faac-4e08-b87e-4d348d18e190">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Copy of Request" id="8da1b0f6-ee6b-402c-8995-3a63a8318af2" disabled="true">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/products/${#Project#id}/availability" methodName="Availability" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Copy of Request" id="704cd389-bb27-4b94-a9b6-a8317a693c06" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic ODZiODhiY2RhZGE2NDllNWJjNDg1MjA1YWQ2ZDUyM2E6NTM2RTNlYjM4ZEY4NDY1RUE5RDNjQmI1ODMzOUZGQ0E=" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>https://bb-web-api-t.eu.cloudhub.io</con:endpoint>
            <con:request/>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/availability</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="fromDate" value="2018-05-05"/>
              <con:entry key="quantity" value="10"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>fromDate</con:entry>
              <con:entry>toDate</con:entry>
              <con:entry>quantity</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Copy of Copy of Request" id="24e129fc-04c5-4382-a783-c511c52c3fee" disabled="true">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/products/${#Project#id}/availability" methodName="Availability" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Copy of Copy of Request" id="704cd389-bb27-4b94-a9b6-a8317a693c06" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic ODZiODhiY2RhZGE2NDllNWJjNDg1MjA1YWQ2ZDUyM2E6NTM2RTNlYjM4ZEY4NDY1RUE5RDNjQmI1ODMzOUZGQ0E=" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>https://bb-web-api-t.eu.cloudhub.io</con:endpoint>
            <con:request/>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/availability</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="fromDate" value="2018-05-06"/>
              <con:entry key="quantity" value="10"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>fromDate</con:entry>
              <con:entry>toDate</con:entry>
              <con:entry>quantity</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script" id="aecba349-9361-4537-b7f7-e8f66ae6d83e" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper

def Response1 = context.expand( '${Copy of Request#Response}' ).toString()
     JSON1 = new JsonSlurper().parseText Response1
log.info(JSON1)
def Response2 = context.expand( '${Copy of Copy of Request#Response}' ).toString()
     JSON2 = new JsonSlurper().parseText Response2
     log.info(JSON2)
if( JSON1 || JSON2 !='NULL')
{
assert JSON1 == JSON2
return 'PASS'	
}
else
{
return 'FAIL'
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{
  "status": "SUCCESS",
  "code": "",
  "message": "",
  "availabilityResult": {
    "productId": "3GZ00201",
    "events": [
      {
        "id": "0000654633-0000000219",
        "quantity": 100,
        "fromDate": "2018-04-25T09:00:00",
        "toDate": "2018-04-25T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654634-0000000219",
        "quantity": 100,
        "fromDate": "2018-04-26T09:00:00",
        "toDate": "2018-04-26T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654635-0000000219",
        "quantity": 100,
        "fromDate": "2018-04-27T09:00:00",
        "toDate": "2018-04-27T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654636-0000000219",
        "quantity": 100,
        "fromDate": "2018-04-28T09:00:00",
        "toDate": "2018-04-28T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654637-0000000219",
        "quantity": 100,
        "fromDate": "2018-04-29T09:00:00",
        "toDate": "2018-04-29T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654638-0000000219",
        "quantity": 100,
        "fromDate": "2018-04-30T09:00:00",
        "toDate": "2018-04-30T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654639-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-01T09:00:00",
        "toDate": "2018-05-01T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654640-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-02T09:00:00",
        "toDate": "2018-05-02T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654641-0000000219",
        "quantity": 91,
        "fromDate": "2018-05-03T09:00:00",
        "toDate": "2018-05-03T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654642-0000000219",
        "quantity": 90,
        "fromDate": "2018-05-04T09:00:00",
        "toDate": "2018-05-04T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654643-0000000219",
        "quantity": 92,
        "fromDate": "2018-05-05T09:00:00",
        "toDate": "2018-05-05T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654644-0000000219",
        "quantity": 90,
        "fromDate": "2018-05-06T09:00:00",
        "toDate": "2018-05-06T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654645-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-07T09:00:00",
        "toDate": "2018-05-07T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654646-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-08T09:00:00",
        "toDate": "2018-05-08T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654647-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-09T09:00:00",
        "toDate": "2018-05-09T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654648-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-10T09:00:00",
        "toDate": "2018-05-10T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654649-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-11T09:00:00",
        "toDate": "2018-05-11T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654650-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-12T09:00:00",
        "toDate": "2018-05-12T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654651-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-13T09:00:00",
        "toDate": "2018-05-13T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654652-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-14T09:00:00",
        "toDate": "2018-05-14T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654653-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-15T09:00:00",
        "toDate": "2018-05-15T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654654-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-16T09:00:00",
        "toDate": "2018-05-16T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654655-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-17T09:00:00",
        "toDate": "2018-05-17T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654656-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-18T09:00:00",
        "toDate": "2018-05-18T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654657-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-19T09:00:00",
        "toDate": "2018-05-19T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654658-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-20T09:00:00",
        "toDate": "2018-05-20T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654659-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-21T09:00:00",
        "toDate": "2018-05-21T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654660-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-22T09:00:00",
        "toDate": "2018-05-22T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654661-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-23T09:00:00",
        "toDate": "2018-05-23T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654662-0000000219",
        "quantity": 96,
        "fromDate": "2018-05-24T09:00:00",
        "toDate": "2018-05-24T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654663-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-25T09:00:00",
        "toDate": "2018-05-25T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654664-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-26T09:00:00",
        "toDate": "2018-05-26T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654665-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-27T09:00:00",
        "toDate": "2018-05-27T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654666-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-28T09:00:00",
        "toDate": "2018-05-28T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654667-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-29T09:00:00",
        "toDate": "2018-05-29T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654668-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-30T09:00:00",
        "toDate": "2018-05-30T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654669-0000000219",
        "quantity": 100,
        "fromDate": "2018-05-31T09:00:00",
        "toDate": "2018-05-31T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654670-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-01T09:00:00",
        "toDate": "2018-06-01T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654671-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-02T09:00:00",
        "toDate": "2018-06-02T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654672-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-03T09:00:00",
        "toDate": "2018-06-03T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654673-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-04T09:00:00",
        "toDate": "2018-06-04T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654674-0000000219",
        "quantity": 98,
        "fromDate": "2018-06-05T09:00:00",
        "toDate": "2018-06-05T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654675-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-06T09:00:00",
        "toDate": "2018-06-06T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654676-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-07T09:00:00",
        "toDate": "2018-06-07T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654677-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-08T09:00:00",
        "toDate": "2018-06-08T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654678-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-09T09:00:00",
        "toDate": "2018-06-09T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654679-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-10T09:00:00",
        "toDate": "2018-06-10T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654680-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-11T09:00:00",
        "toDate": "2018-06-11T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654681-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-12T09:00:00",
        "toDate": "2018-06-12T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654682-0000000219",
        "quantity": 92,
        "fromDate": "2018-06-13T09:00:00",
        "toDate": "2018-06-13T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654683-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-14T09:00:00",
        "toDate": "2018-06-14T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654684-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-15T09:00:00",
        "toDate": "2018-06-15T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654685-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-16T09:00:00",
        "toDate": "2018-06-16T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654686-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-17T09:00:00",
        "toDate": "2018-06-17T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654687-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-18T09:00:00",
        "toDate": "2018-06-18T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654688-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-19T09:00:00",
        "toDate": "2018-06-19T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654689-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-20T09:00:00",
        "toDate": "2018-06-20T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654690-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-21T09:00:00",
        "toDate": "2018-06-21T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654691-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-22T09:00:00",
        "toDate": "2018-06-22T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654692-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-23T09:00:00",
        "toDate": "2018-06-23T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654693-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-24T09:00:00",
        "toDate": "2018-06-24T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654694-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-25T09:00:00",
        "toDate": "2018-06-25T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654695-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-26T09:00:00",
        "toDate": "2018-06-26T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654696-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-27T09:00:00",
        "toDate": "2018-06-27T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654697-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-28T09:00:00",
        "toDate": "2018-06-28T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654698-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-29T09:00:00",
        "toDate": "2018-06-29T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654699-0000000219",
        "quantity": 100,
        "fromDate": "2018-06-30T09:00:00",
        "toDate": "2018-06-30T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654700-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-01T09:00:00",
        "toDate": "2018-07-01T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654701-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-02T09:00:00",
        "toDate": "2018-07-02T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654702-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-03T09:00:00",
        "toDate": "2018-07-03T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654703-0000000219",
        "quantity": 22,
        "fromDate": "2018-07-04T09:00:00",
        "toDate": "2018-07-04T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654704-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-05T09:00:00",
        "toDate": "2018-07-05T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654705-0000000219",
        "quantity": 88,
        "fromDate": "2018-07-06T09:00:00",
        "toDate": "2018-07-06T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654706-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-07T09:00:00",
        "toDate": "2018-07-07T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654707-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-08T09:00:00",
        "toDate": "2018-07-08T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654708-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-09T09:00:00",
        "toDate": "2018-07-09T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654709-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-10T09:00:00",
        "toDate": "2018-07-10T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654710-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-11T09:00:00",
        "toDate": "2018-07-11T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654711-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-12T09:00:00",
        "toDate": "2018-07-12T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654712-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-13T09:00:00",
        "toDate": "2018-07-13T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654713-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-14T09:00:00",
        "toDate": "2018-07-14T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654714-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-15T09:00:00",
        "toDate": "2018-07-15T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654715-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-16T09:00:00",
        "toDate": "2018-07-16T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654716-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-17T09:00:00",
        "toDate": "2018-07-17T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654717-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-18T09:00:00",
        "toDate": "2018-07-18T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654718-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-19T09:00:00",
        "toDate": "2018-07-19T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654719-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-20T09:00:00",
        "toDate": "2018-07-20T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654720-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-21T09:00:00",
        "toDate": "2018-07-21T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654721-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-22T09:00:00",
        "toDate": "2018-07-22T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654722-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-23T09:00:00",
        "toDate": "2018-07-23T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654723-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-24T09:00:00",
        "toDate": "2018-07-24T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654724-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-25T09:00:00",
        "toDate": "2018-07-25T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654725-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-26T09:00:00",
        "toDate": "2018-07-26T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654726-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-27T09:00:00",
        "toDate": "2018-07-27T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654727-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-28T09:00:00",
        "toDate": "2018-07-28T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654728-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-29T09:00:00",
        "toDate": "2018-07-29T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654729-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-30T09:00:00",
        "toDate": "2018-07-30T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654730-0000000219",
        "quantity": 100,
        "fromDate": "2018-07-31T09:00:00",
        "toDate": "2018-07-31T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654732-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-02T09:00:00",
        "toDate": "2018-08-02T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654733-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-03T09:00:00",
        "toDate": "2018-08-03T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654734-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-04T09:00:00",
        "toDate": "2018-08-04T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654735-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-05T09:00:00",
        "toDate": "2018-08-05T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654736-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-06T09:00:00",
        "toDate": "2018-08-06T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654737-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-07T09:00:00",
        "toDate": "2018-08-07T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654738-0000000219",
        "quantity": 97,
        "fromDate": "2018-08-08T09:00:00",
        "toDate": "2018-08-08T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654739-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-09T09:00:00",
        "toDate": "2018-08-09T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654740-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-10T09:00:00",
        "toDate": "2018-08-10T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654741-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-11T09:00:00",
        "toDate": "2018-08-11T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654742-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-12T09:00:00",
        "toDate": "2018-08-12T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654743-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-13T09:00:00",
        "toDate": "2018-08-13T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654744-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-14T09:00:00",
        "toDate": "2018-08-14T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654745-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-15T09:00:00",
        "toDate": "2018-08-15T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654746-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-16T09:00:00",
        "toDate": "2018-08-16T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654747-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-17T09:00:00",
        "toDate": "2018-08-17T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654748-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-18T09:00:00",
        "toDate": "2018-08-18T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654749-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-19T09:00:00",
        "toDate": "2018-08-19T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654750-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-20T09:00:00",
        "toDate": "2018-08-20T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654751-0000000219",
        "quantity": 98,
        "fromDate": "2018-08-21T09:00:00",
        "toDate": "2018-08-21T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654752-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-22T09:00:00",
        "toDate": "2018-08-22T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654753-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-23T09:00:00",
        "toDate": "2018-08-23T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654754-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-24T09:00:00",
        "toDate": "2018-08-24T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654755-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-25T09:00:00",
        "toDate": "2018-08-25T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654756-0000000219",
        "quantity": 96,
        "fromDate": "2018-08-26T09:00:00",
        "toDate": "2018-08-26T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654757-0000000219",
        "quantity": 96,
        "fromDate": "2018-08-27T09:00:00",
        "toDate": "2018-08-27T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654758-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-28T09:00:00",
        "toDate": "2018-08-28T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654759-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-29T09:00:00",
        "toDate": "2018-08-29T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654760-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-30T09:00:00",
        "toDate": "2018-08-30T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654761-0000000219",
        "quantity": 100,
        "fromDate": "2018-08-31T09:00:00",
        "toDate": "2018-08-31T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654762-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-01T09:00:00",
        "toDate": "2018-09-01T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654763-0000000219",
        "quantity": 94,
        "fromDate": "2018-09-02T09:00:00",
        "toDate": "2018-09-02T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654764-0000000219",
        "quantity": 98,
        "fromDate": "2018-09-03T09:00:00",
        "toDate": "2018-09-03T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654765-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-04T09:00:00",
        "toDate": "2018-09-04T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654766-0000000219",
        "quantity": 96,
        "fromDate": "2018-09-05T09:00:00",
        "toDate": "2018-09-05T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654767-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-06T09:00:00",
        "toDate": "2018-09-06T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654768-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-07T09:00:00",
        "toDate": "2018-09-07T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654769-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-08T09:00:00",
        "toDate": "2018-09-08T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654770-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-09T09:00:00",
        "toDate": "2018-09-09T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654771-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-10T09:00:00",
        "toDate": "2018-09-10T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654772-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-11T09:00:00",
        "toDate": "2018-09-11T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654773-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-12T09:00:00",
        "toDate": "2018-09-12T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654774-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-13T09:00:00",
        "toDate": "2018-09-13T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654775-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-14T09:00:00",
        "toDate": "2018-09-14T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654776-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-15T09:00:00",
        "toDate": "2018-09-15T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654777-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-16T09:00:00",
        "toDate": "2018-09-16T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654778-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-17T09:00:00",
        "toDate": "2018-09-17T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654779-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-18T09:00:00",
        "toDate": "2018-09-18T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654780-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-19T09:00:00",
        "toDate": "2018-09-19T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654781-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-20T09:00:00",
        "toDate": "2018-09-20T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654782-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-21T09:00:00",
        "toDate": "2018-09-21T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654783-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-22T09:00:00",
        "toDate": "2018-09-22T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654784-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-23T09:00:00",
        "toDate": "2018-09-23T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654785-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-24T09:00:00",
        "toDate": "2018-09-24T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654786-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-25T09:00:00",
        "toDate": "2018-09-25T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654787-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-26T09:00:00",
        "toDate": "2018-09-26T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654788-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-27T09:00:00",
        "toDate": "2018-09-27T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654789-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-28T09:00:00",
        "toDate": "2018-09-28T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654790-0000000219",
        "quantity": 100,
        "fromDate": "2018-09-29T09:00:00",
        "toDate": "2018-09-29T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654791-0000000219",
        "quantity": 91,
        "fromDate": "2018-09-30T09:00:00",
        "toDate": "2018-09-30T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654792-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-01T09:00:00",
        "toDate": "2018-10-01T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654793-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-02T09:00:00",
        "toDate": "2018-10-02T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654794-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-03T09:00:00",
        "toDate": "2018-10-03T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654795-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-04T09:00:00",
        "toDate": "2018-10-04T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654796-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-05T09:00:00",
        "toDate": "2018-10-05T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654797-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-06T09:00:00",
        "toDate": "2018-10-06T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654798-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-07T09:00:00",
        "toDate": "2018-10-07T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654799-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-08T09:00:00",
        "toDate": "2018-10-08T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654800-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-09T09:00:00",
        "toDate": "2018-10-09T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654801-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-10T09:00:00",
        "toDate": "2018-10-10T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654802-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-11T09:00:00",
        "toDate": "2018-10-11T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654803-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-12T09:00:00",
        "toDate": "2018-10-12T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654804-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-13T09:00:00",
        "toDate": "2018-10-13T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654805-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-14T09:00:00",
        "toDate": "2018-10-14T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654806-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-15T09:00:00",
        "toDate": "2018-10-15T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654807-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-16T09:00:00",
        "toDate": "2018-10-16T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654808-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-17T09:00:00",
        "toDate": "2018-10-17T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654809-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-18T09:00:00",
        "toDate": "2018-10-18T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654810-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-19T09:00:00",
        "toDate": "2018-10-19T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654811-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-20T09:00:00",
        "toDate": "2018-10-20T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654812-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-21T09:00:00",
        "toDate": "2018-10-21T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654813-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-22T09:00:00",
        "toDate": "2018-10-22T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654814-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-23T09:00:00",
        "toDate": "2018-10-23T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654815-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-24T09:00:00",
        "toDate": "2018-10-24T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654816-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-25T09:00:00",
        "toDate": "2018-10-25T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654817-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-26T09:00:00",
        "toDate": "2018-10-26T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654818-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-27T09:00:00",
        "toDate": "2018-10-27T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654819-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-28T09:00:00",
        "toDate": "2018-10-28T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654820-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-29T09:00:00",
        "toDate": "2018-10-29T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654821-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-30T09:00:00",
        "toDate": "2018-10-30T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654822-0000000219",
        "quantity": 100,
        "fromDate": "2018-10-31T09:00:00",
        "toDate": "2018-10-31T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654823-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-01T09:00:00",
        "toDate": "2018-11-01T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654824-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-02T09:00:00",
        "toDate": "2018-11-02T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654825-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-03T09:00:00",
        "toDate": "2018-11-03T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654826-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-04T09:00:00",
        "toDate": "2018-11-04T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654827-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-05T09:00:00",
        "toDate": "2018-11-05T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654828-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-06T09:00:00",
        "toDate": "2018-11-06T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654829-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-07T09:00:00",
        "toDate": "2018-11-07T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654830-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-08T09:00:00",
        "toDate": "2018-11-08T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654831-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-09T09:00:00",
        "toDate": "2018-11-09T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654832-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-10T09:00:00",
        "toDate": "2018-11-10T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654833-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-11T09:00:00",
        "toDate": "2018-11-11T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654834-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-12T09:00:00",
        "toDate": "2018-11-12T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654835-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-13T09:00:00",
        "toDate": "2018-11-13T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654836-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-14T09:00:00",
        "toDate": "2018-11-14T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654837-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-15T09:00:00",
        "toDate": "2018-11-15T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654838-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-16T09:00:00",
        "toDate": "2018-11-16T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654839-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-17T09:00:00",
        "toDate": "2018-11-17T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654840-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-18T09:00:00",
        "toDate": "2018-11-18T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654841-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-19T09:00:00",
        "toDate": "2018-11-19T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654842-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-20T09:00:00",
        "toDate": "2018-11-20T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654843-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-21T09:00:00",
        "toDate": "2018-11-21T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654844-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-22T09:00:00",
        "toDate": "2018-11-22T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654845-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-23T09:00:00",
        "toDate": "2018-11-23T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654846-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-24T09:00:00",
        "toDate": "2018-11-24T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654847-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-25T09:00:00",
        "toDate": "2018-11-25T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654848-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-26T09:00:00",
        "toDate": "2018-11-26T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654849-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-27T09:00:00",
        "toDate": "2018-11-27T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654850-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-28T09:00:00",
        "toDate": "2018-11-28T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654851-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-29T09:00:00",
        "toDate": "2018-11-29T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654852-0000000219",
        "quantity": 100,
        "fromDate": "2018-11-30T09:00:00",
        "toDate": "2018-11-30T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654855-0000000219",
        "quantity": 45,
        "fromDate": "2018-12-03T09:00:00",
        "toDate": "2018-12-03T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654856-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-04T09:00:00",
        "toDate": "2018-12-04T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654857-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-05T09:00:00",
        "toDate": "2018-12-05T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654858-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-06T09:00:00",
        "toDate": "2018-12-06T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654859-0000000219",
        "quantity": 99,
        "fromDate": "2018-12-07T09:00:00",
        "toDate": "2018-12-07T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654860-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-08T09:00:00",
        "toDate": "2018-12-08T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654861-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-09T09:00:00",
        "toDate": "2018-12-09T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654862-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-10T09:00:00",
        "toDate": "2018-12-10T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654863-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-11T09:00:00",
        "toDate": "2018-12-11T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654864-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-12T09:00:00",
        "toDate": "2018-12-12T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654865-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-13T09:00:00",
        "toDate": "2018-12-13T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654866-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-14T09:00:00",
        "toDate": "2018-12-14T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654867-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-15T09:00:00",
        "toDate": "2018-12-15T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654868-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-16T09:00:00",
        "toDate": "2018-12-16T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654869-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-17T09:00:00",
        "toDate": "2018-12-17T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654870-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-18T09:00:00",
        "toDate": "2018-12-18T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654871-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-19T09:00:00",
        "toDate": "2018-12-19T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654872-0000000219",
        "quantity": 52,
        "fromDate": "2018-12-20T09:00:00",
        "toDate": "2018-12-20T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654873-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-21T09:00:00",
        "toDate": "2018-12-21T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654874-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-22T09:00:00",
        "toDate": "2018-12-22T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654875-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-23T09:00:00",
        "toDate": "2018-12-23T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654876-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-24T09:00:00",
        "toDate": "2018-12-24T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654877-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-25T09:00:00",
        "toDate": "2018-12-25T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654878-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-26T09:00:00",
        "toDate": "2018-12-26T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654879-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-27T09:00:00",
        "toDate": "2018-12-27T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654880-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-28T09:00:00",
        "toDate": "2018-12-28T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654881-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-29T09:00:00",
        "toDate": "2018-12-29T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654882-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-30T09:00:00",
        "toDate": "2018-12-30T19:00:00",
        "status": "Available"
      },
      {
        "id": "0000654883-0000000219",
        "quantity": 100,
        "fromDate": "2018-12-31T09:00:00",
        "toDate": "2018-12-31T19:00:00",
        "status": "Available"
      }
    ]
  },
  "noServiceDates": [
    "2018-07-04",
    "2018-12-31"
  ]
}</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>e8b867b7-b440-4c31-b9ac-0459d6cc5636</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>24e129fc-04c5-4382-a783-c511c52c3fee</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>8ab99082-81fc-44ab-b164-a97b8e2a80a6</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="630da0c3-d407-48fd-a409-c13232060188" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="availability_MM" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="c1fe591a-1cba-4e78-908e-4e82b4842086">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_AvailabilityTestdata.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Availability\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusESAvailability_TestData.xlsx</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="e71f35e4-a934-4fc2-87ee-b1a8e1d8c6f2">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>MM</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>Test Case</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>EndPoint</con:property>
          <con:property>Resource</con:property>
          <con:property>Method</con:property>
          <con:property>Authorization</con:property>
          <con:property>productId</con:property>
          <con:property>fromDate</con:property>
          <con:property>toDate</con:property>
          <con:property>quantity</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="fa5281f5-c2b5-44a9-b7a4-4453a7657458">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/products/${#Project#id}/availability" methodName="Availability" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="704cd389-bb27-4b94-a9b6-a8317a693c06" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request/>
            <con:originalUri>https://bb-web-api-d.eu.cloudhub.io/api/availability</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="fromDate" value="${DataSource#fromDate}"/>
              <con:entry key="quantity" value="${DataSource#quantity}"/>
              <con:entry key="toDate" value="${DataSource#toDate}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>fromDate</con:entry>
              <con:entry>toDate</con:entry>
              <con:entry>quantity</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="255740e4-e39e-47c0-bd3d-d68b504b22e7">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>errorMessage</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="36d538c5-6cd5-40cb-bf88-29bc1e2c7026">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
log.info(location)
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#Test Case}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#Test Case}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
log.info(name)
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
log.info(Response)
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="b348561f-407e-4a61-9599-b3d7c34d538a">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A9</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#Test Case}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#Project#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#Project#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#Project#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="fa3392f1-c96c-4473-b2a9-7bdd8cf8df94">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">parsing Request failed</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{   "status": "ERROR",   "data":  {  },"errorCode": "400",   "errorMessage": "parsing Request failed" }</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="87e99f5b-8e5d-41db-bd3e-4d66a35e4b17" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="availability_MO" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="3904a009-91fd-4e2d-8828-1da39fd440b2">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_AvailabilityTestdata.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Availability\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusESAvailability_TestData.xlsx</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="6dc3d488-25d1-4920-8009-20ff0da024b6">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>MO</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>Test Case</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>EndPoint</con:property>
          <con:property>Resource</con:property>
          <con:property>Method</con:property>
          <con:property>Authorization</con:property>
          <con:property>productId</con:property>
          <con:property>fromDate</con:property>
          <con:property>toDate</con:property>
          <con:property>quantity</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="14b2832e-bbb9-471d-b5e3-a08cf743fa63">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/products/${#Project#id}/availability" methodName="Availability" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="704cd389-bb27-4b94-a9b6-a8317a693c06" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#Authorization}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request/>
            <con:originalUri>https://bb-web-api-d.eu.cloudhub.io/api/availability</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="fromDate" value="${DataSource#fromDate}"/>
              <con:entry key="quantity" value="${DataSource#quantity}"/>
              <con:entry key="toDate" value="${DataSource#toDate}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>fromDate</con:entry>
              <con:entry>toDate</con:entry>
              <con:entry>quantity</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="7c79d6de-c911-4434-ab02-8830daa24123">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>errorMessage</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="04b4aeab-4396-4e04-bc6b-749d561461cd">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
log.info(location)
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#Test Case}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#Test Case}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
log.info(name)
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
log.info(Response)
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="9df8e492-ec3e-4278-bbb2-d86959fbbc88">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A14</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#Test Case}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#Project#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#Project#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#Project#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="a7a4b166-d36d-4a47-bd00-d0bcf99681d0">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AUTHORIZATION_FAILURE</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{   "status": "ERROR",   "data":  {  },"errorCode": "400",   "errorMessage": "parsing Request failed" }</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="eba497f3-6927-41e8-885a-85343b7b10c7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="availability_ID" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="da6b099e-2762-4b98-890e-215dc20e19ee">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_AvailabilityTestdata.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Availability\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusESAvailability_TestData.xlsx</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="6d089bfa-33d0-4381-85b7-dd57a6909b70">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>ID</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>System Test Case</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>EndPoint</con:property>
          <con:property>Resource</con:property>
          <con:property>Method</con:property>
          <con:property>Authorization</con:property>
          <con:property>productId</con:property>
          <con:property>fromDate</con:property>
          <con:property>toDate</con:property>
          <con:property>quantity</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="91ca5b7f-aa87-4ffe-b37b-80562a02a4cb">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/products/${#Project#id}/availability" methodName="Availability" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="704cd389-bb27-4b94-a9b6-a8317a693c06" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#Authorization}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request/>
            <con:originalUri>https://bb-web-api-d.eu.cloudhub.io/api/availability</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="fromDate" value="${DataSource#fromDate}"/>
              <con:entry key="quantity" value="${DataSource#quantity}"/>
              <con:entry key="toDate" value="${DataSource#toDate}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>fromDate</con:entry>
              <con:entry>toDate</con:entry>
              <con:entry>quantity</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="3e649c4b-cf38-4efc-b1b1-d4a6558c9a66">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>message</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="552fd140-5776-43c7-94b4-d43a3034c862">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
log.info(location)
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#Test Case}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#Test Case}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
log.info(name)
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
log.info(Response)
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="b84603a4-2698-40b9-9532-eb4525da78db">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A16</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>Test Case</con:name>
              <con:value>${DataSource#System Test Case}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#Project#status}</con:value>
            </con:property>
            <con:property>
              <con:name>Fail Reason</con:name>
              <con:value>${#Project#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>Response</con:name>
              <con:value>${#Project#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="8abc6346-24a2-4a67-860e-ac464482e20b">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">parsing Request failed</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">{   "status": "ERROR",   "data":  {  },"errorCode": "400",   "errorMessage": "parsing Request failed" }</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>6d089bfa-33d0-4381-85b7-dd57a6909b70</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite id="04dd3f60-8616-4c2d-afbd-22684c06ca22" name="Reservation_TestSuite">
    <con:description>TestSuite generated for REST Service [https://bb-web-api-g.eu.cloudhub.io]</con:description>
    <con:settings/>
    <con:savedRecentRuns>1</con:savedRecentRuns>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="b1a90a65-b520-4e43-8864-461b29413bec" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="reservation_BMO" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="b6a990e6-2eb2-4648-b327-c1b3653383f5">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_ReservationTestdata.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Reservation\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_ReservationTestdata</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="42bf007c-6782-4fd5-94cb-c5f45ba12117">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>BMO</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>TestCase</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>Authorization</con:property>
          <con:property>contentType</con:property>
          <con:property>reservationFee</con:property>
          <con:property>paymentMethod</con:property>
          <con:property>currencyCode</con:property>
          <con:property>notes</con:property>
          <con:property>reserveUntil</con:property>
          <con:property>firstname</con:property>
          <con:property>lastname</con:property>
          <con:property>email</con:property>
          <con:property>phone</con:property>
          <con:property>mobile</con:property>
          <con:property>eventId</con:property>
          <con:property>dateOfTravel</con:property>
          <con:property>category</con:property>
          <con:property>quantity</con:property>
          <con:property>category1</con:property>
          <con:property>quantity1</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="1d54ac52-a72e-476b-bd04-d9fbdb710d89">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations" methodName="Reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{
	"reservationRequest": {
		"reservationFee": "5",
		"currencyCode": "USD",
		"paymentMethod": "cash",
		"notes": "custom notes",
		"reserveUntil": "2019-04-10",
		"leadGuest": {
			"firstname": "Test",
			"lastname": "Test",
			"email": "abc@test.com",
			"phone": "1234567890",
			"mobile": "1234567890"
		},
		"products": {
			"product": [{
				"productId": "${#Project#id}",
				"eventId": "0000654628-0000000219",
				"dateOfTravel": "2019-04-10",
				"items": [{
						"category": "Adult",
						"quantity": "2"
					},
					{
						"category": "Child",
						"quantity": "1"
					}
				]
			}]
		}
	}
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="63136f40-5296-4fb1-8160-def8b27d0381">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>errorMessage</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reservationReference</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.reservationReference[0]</con:sourcePath>
            <con:targetType>reservationReference</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="02aea15f-9756-4c40-9001-b49b5f26fffb">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCase}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCase}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="8b3e4c16-ef51-46bc-8b2f-b910ef76d1ab">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A4</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#Project#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#Project#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#Project#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="3401bad0-1ec2-4ee7-86dc-b2e2f87a2f24">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{  "status": "ERROR",  "data":  {  },  "errorCode": "401",  "errorMessage": "Invalid Authorization credentials"  }</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="1acf67f7-3c07-4102-bcbd-6692f418bf0d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="reservation_MM" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="9f22b5dd-5857-49aa-b428-f69be0d3a614">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_ReservationTestdata.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Reservation\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Reservation_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="7cfbda34-5781-4676-8105-2acc8a67172d">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>MM</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>TestCase</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>Authorization</con:property>
          <con:property>contentType</con:property>
          <con:property>reservationFee</con:property>
          <con:property>paymentMethod</con:property>
          <con:property>currencyCode</con:property>
          <con:property>notes</con:property>
          <con:property>reserveUntil</con:property>
          <con:property>firstname</con:property>
          <con:property>lastname</con:property>
          <con:property>email</con:property>
          <con:property>phone</con:property>
          <con:property>mobile</con:property>
          <con:property>eventId</con:property>
          <con:property>dateOfTravel</con:property>
          <con:property>category</con:property>
          <con:property>quantity</con:property>
          <con:property>category1</con:property>
          <con:property>quantity1</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="6508439f-e940-4867-8c11-e617b9d441cc">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations" methodName="Reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content_Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{
	"reservationRequest": {
		"reservationFee": "5",
		"currencyCode": "USD",
		"paymentMethod": "cash",
		"notes": "custom notes",
		"reserveUntil": "2019-04-10",
		"leadGuest": {
			"firstname": "Test",
			"lastname": "Test",
			"email": "abc@test.com",
			"phone": "1234567890",
			"mobile": "1234567890"
		},
		"products": {
			"product": [{
				"productId": "${#Project#id}",
				"eventId": "0000654628-0000000219",
				"dateOfTravel": "2019-04-10",
				"items": [{
						"category": "Adult",
						"quantity": "2"
					},
					{
						"category": "Child",
						"quantity": "1"
					}
				]
			}]
		}
	}
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="e0ca916b-4a8d-4def-80d9-cfd82405d960">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>errorMessage</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="b1dbce6c-c621-4565-b38c-dbf579373155">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCase}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCase}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="eb336a2e-7e36-43a6-8432-438180d11128">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A7</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#Project#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#Project#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#Project#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="4ab0f824-6a8c-4e37-bbc3-c1fdb8ea1d96">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{  "status": "ERROR",  "data":  {  },  "errorCode": "401",  "errorMessage": "Invalid Authorization credentials"  }</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="86bc90ab-ca78-4ab3-9572-5324ce4342cc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="reservation_MO" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="bba19ce3-de06-4c05-95c2-bf0574deb43b">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_ReservationTestdata.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Reservation\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Reservation_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="10b67543-af5d-4599-858c-e62eff99ee3b">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>MO</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>TestCase</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>Authorization</con:property>
          <con:property>contentType</con:property>
          <con:property>reservationFee</con:property>
          <con:property>paymentMethod</con:property>
          <con:property>currencyCode</con:property>
          <con:property>notes</con:property>
          <con:property>reserveUntil</con:property>
          <con:property>firstname</con:property>
          <con:property>lastname</con:property>
          <con:property>email</con:property>
          <con:property>phone</con:property>
          <con:property>mobile</con:property>
          <con:property>eventId</con:property>
          <con:property>dateOfTravel</con:property>
          <con:property>category</con:property>
          <con:property>quantity</con:property>
          <con:property>category1</con:property>
          <con:property>quantity1</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="9c2aef95-a116-452f-84df-6fd84442855a">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations" methodName="Reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{
	"reservationRequest": {
		"reservationFee": "5",
		"currencyCode": "USD",
		"paymentMethod": "cash",
		"notes": "custom notes",
		"reserveUntil": "2019-04-10",
		"leadGuest": {
			"firstname": "Test",
			"lastname": "Test",
			"email": "abc@test.com",
			"phone": "1234567890",
			"mobile": "1234567890"
		},
		"products": {
			"product": [{
				"productId": "${#Project#id}",
				"eventId": "0000654628-0000000219",
				"dateOfTravel": "2019-04-10",
				"items": [{
						"category": "Adult",
						"quantity": "2"
					},
					{
						"category": "Child",
						"quantity": "1"
					}
				]
			}]
		}
	}
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="099242c7-9269-4310-a2a3-10cbe8a82b11">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>errorMessage</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="39bfba39-a40b-4269-af6d-7fcab7064f70">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCase}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCase}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="23160df2-69f7-496f-88e3-d4ff34306280">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A16</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#Project#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#Project#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#Project#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="f548b2fd-c019-449a-a2c6-b7a0c5d11772">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">internal error occurred</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{   "status": "ERROR",   "code": "500",   "message": "internal error occurred" }</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>10b67543-af5d-4599-858c-e62eff99ee3b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="511b5331-42b6-4852-ab9e-e19e877ff75d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="reservation_ID" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="45f297e5-88b0-4fdd-897d-95a741e3c2ba">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_ReservationTestdata.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Reservation\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Reservation_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="dc073eba-a5ba-4a6a-bad4-a5c5e60168cf">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>ID</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>TestCase</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>Authorization</con:property>
          <con:property>contentType</con:property>
          <con:property>reservationFee</con:property>
          <con:property>paymentMethod</con:property>
          <con:property>currencyCode</con:property>
          <con:property>notes</con:property>
          <con:property>reserveUntil</con:property>
          <con:property>firstname</con:property>
          <con:property>lastname</con:property>
          <con:property>email</con:property>
          <con:property>phone</con:property>
          <con:property>mobile</con:property>
          <con:property>eventId</con:property>
          <con:property>dateOfTravel</con:property>
          <con:property>category</con:property>
          <con:property>quantity</con:property>
          <con:property>category1</con:property>
          <con:property>quantity1</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="8d0dff4f-d2f2-4471-b5b6-2a6790d7c116">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations" methodName="Reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{
	"reservationRequest": {
		"reservationFee": "5",
		"currencyCode": "USD",
		"paymentMethod": "cash",
		"notes": "custom notes",
		"reserveUntil": "2019-04-10",
		"leadGuest": {
			"firstname": "Test",
			"lastname": "Test",
			"email": "abc@test.com",
			"phone": "1234567890",
			"mobile": "1234567890"
		},
		"products": {
			"product": [{
				"productId": "${#Project#id}",
				"eventId": "0000654628-0000000219",
				"dateOfTravel": "2019-04-10",
				"items": [{
						"category": "Adult",
						"quantity": "2"
					},
					{
						"category": "Child",
						"quantity": "1"
					}
				]
			}]
		}
	}
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="fdb298d1-3707-460a-92a4-7d619bd4159a">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>errorMessage</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="0d2b4787-8eec-46cb-acf4-bdb2003db437">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCase}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCase}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="31867793-c78e-42d0-ba0b-5e43bf654327">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A29</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#Project#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#Project#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#Project#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="b695a6c5-a5c7-412e-9d04-88cf93ca9885">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{  "status": "ERROR",  "data":  {  },  "errorCode": "401",  "errorMessage": "Invalid Authorization credentials"  }</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite id="c5d9b18e-5b15-41ed-b6fc-fa7fb19b3f56" name="Booking_TestSuite">
    <con:settings/>
    <con:savedRecentRuns>1</con:savedRecentRuns>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="06392f54-2ebc-4983-9c29-81ec13cf0588" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="booking_BMO" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="c118cfc4-413c-4c26-837a-34529016e626">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_Booking_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Booking\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Booking_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="944b3e29-5aa3-46ac-bbc3-29d3f31992c2">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>BMO</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>System Test Case</con:property>
          <con:property>Description (Optional)</con:property>
          <con:property>Authorization</con:property>
          <con:property>contentType</con:property>
          <con:property>currencyCode</con:property>
          <con:property>bookingFee</con:property>
          <con:property>paymentMethod</con:property>
          <con:property>agentBookingReference</con:property>
          <con:property>ticketPerPassenger</con:property>
          <con:property>leadGuest. Firstname</con:property>
          <con:property>lastname</con:property>
          <con:property>Email</con:property>
          <con:property>phone</con:property>
          <con:property>mobile</con:property>
          <con:property>dateOfTravel</con:property>
          <con:property>preferences</con:property>
          <con:property>discountAmount</con:property>
          <con:property>discountCode</con:property>
          <con:property>promoCode</con:property>
          <con:property>product.currencyCode</con:property>
          <con:property>price</con:property>
          <con:property>category1</con:property>
          <con:property>quantity1</con:property>
          <con:property>category2</con:property>
          <con:property>quantity2</con:property>
          <con:property>Expected Result</con:property>
          <con:property>Actual Reslult</con:property>
          <con:property>JIRA ID</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="reservation" id="d9fe2687-0d3e-42da-9896-547dead31e67" disabled="true">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations" methodName="Reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="reservation" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${DataSource#Authorization}"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>https://bb-web-api-v1-t.ir-e1.cloudhub.io</con:endpoint>
            <con:request>{
	"reservationRequest": {
		"reservationFee": "5",
		"currencyCode": "USD",
		"paymentMethod": "cash",
		"notes": "custom notes",
		"reserveUntil": "2019-04-10",
		"leadGuest": {
			"firstname": "Test",
			"lastname": "Test",
			"email": "abc@test.com",
			"phone": "1234567890",
			"mobile": "1234567890"
		},
		"products": {
			"product": [{
				"productId": "${#Project#id}",
				"eventId": "0000654628-0000000219",
				"dateOfTravel": "2019-04-10",
				"items": [{
						"category": "Adult",
						"quantity": "2"
					},
					{
						"category": "Child",
						"quantity": "1"
					}
				]
			}]
		}
	}
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="reservationreference transfer" id="6a63db7f-eac0-4f83-ad8b-1613d5003273" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reservationreference</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>reservation</con:sourceStep>
            <con:sourcePath>reservationResult.reservationReference</con:sourcePath>
            <con:targetType>reservationReference</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="039998b7-7818-496c-b1c9-43ce8283116f">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/bookings" methodName="Booking" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{
 "bookingRequest": {
   "reservationFee": "5",
   "currencyCode": "USD",
   "reservationReference": "",
   "paymentMethod": "cash",
   "notes": "custom notes",
   "ticketPerPassenger": "1",
   "reserveUntil": "2019-12-28",
   "leadGuest": {
     "firstname": "Test",
     "lastname": "Test",
     "email": "abc@test.com",
     "phone": "1234567890",
     "mobile": "1234567890"
   },
   "paid": "0",
   "products": {
     "product": [
       {
         "productId": "${#Project#id}",
           "dateOfTravel": "2019-12-23",
         "items": [
           {
             "category": "Adult",
             "quantity": "2",
             "price": ""
           },
           {
             "category": "Child",
             "quantity": "1",
             "price": ""
           }
         ]
       }
     ]
   }
 }
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="51cb7bee-ccff-4290-b639-525909a89d9c">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>errorMessage</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>bookingReference</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.bookingReference[0]</con:sourcePath>
            <con:targetType>bookingReference</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="912acfbb-df57-4f65-8a4f-05b6cc399ccb">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#System Test Case}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#System Test Case}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="1ef30fce-50f7-40ca-a7a3-ba45c753c0f5">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A4</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#System Test Case}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#Project#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#Project#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#Project#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="16a3d0e4-8d69-4140-91ac-4feade6d00ef">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>reservation</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value>Internal system failure, please try again</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{"status":"ERROR", "code":"500", "message":"Internal system failure, please try again"  , "reservationResult": {"status":"NOT_RESERVED"} }</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>944b3e29-5aa3-46ac-bbc3-29d3f31992c2</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>d9fe2687-0d3e-42da-9896-547dead31e67</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>6a63db7f-eac0-4f83-ad8b-1613d5003273</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="13eeed73-6364-46b4-a9ec-9a4da06cb4b6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="booking_MM" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="88c64887-39ba-4b51-bed8-41d9a8a48d8f">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_Booking_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Booking\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>MM</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Booking_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="c40f45d6-409a-4531-9d62-1ebede4e4046">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>MM</worksheet>
              <cell>A8</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>System Test Case</con:property>
          <con:property>Description (Optional)</con:property>
          <con:property>authorization</con:property>
          <con:property>contentType</con:property>
          <con:property>currencyCode</con:property>
          <con:property>bookingFee</con:property>
          <con:property>paymentMethod</con:property>
          <con:property>agentBookingReference</con:property>
          <con:property>ticketPerPassenger</con:property>
          <con:property>leadGuest. Firstname</con:property>
          <con:property>lastname</con:property>
          <con:property>Email</con:property>
          <con:property>phone</con:property>
          <con:property>mobile</con:property>
          <con:property>dateOfTravel</con:property>
          <con:property>preferences</con:property>
          <con:property>discountAmount</con:property>
          <con:property>discountCode</con:property>
          <con:property>promoCode</con:property>
          <con:property>product.currencyCode</con:property>
          <con:property>price</con:property>
          <con:property>category1</con:property>
          <con:property>quantity1</con:property>
          <con:property>category2</con:property>
          <con:property>quantity2</con:property>
          <con:property>Expected Result</con:property>
          <con:property>Actual Reslult</con:property>
          <con:property>JIRA ID</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="reservation" id="d65b6c7f-993f-4564-b6a1-29f1a0372e24" disabled="true">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations" methodName="Reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="reservation" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ODZiODhiY2RhZGE2NDllNWJjNDg1MjA1YWQ2ZDUyM2E6NTM2RTNlYjM4ZEY4NDY1RUE5RDNjQmI1ODMzOUZGQ0E= "/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>https://bb-web-api-g.eu.cloudhub.io</con:endpoint>
            <con:request>{
	"reservationRequest": {
		"reservationFee": "${DataSource#bookingFee}",
		"currencyCode": "${DataSource#currencyCode}",
		"paymentMethod": "${DataSource#paymentMethod}",
		"notes": "${DataSource#agentBookingReference}",
		"reserveUntil": "${DataSource#dateOfTravel}",
		"leadGuest": {
			"firstname": "${DataSource#leadGuest. Firstname}",
			"lastname": "${DataSource#lastname}",
			"email": "${DataSource#Email}",
			"phone": "${DataSource#phone}",
			"mobile": "${DataSource#mobile}"
		},
		"products": {
			"product": [{
				"productId": "${#Project#id}",
				"dateOfTravel": "${DataSource#dateOfTravel}",
				"items": [{
						"category": "${DataSource#category1}",
						"quantity": "${DataSource#quantity1}"
					},
					{
						"category": "${DataSource#category2}",
						"quantity": "${DataSource#quantity2}"
					}
				]
			}]
		}
	}
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="reservationreference transfer" id="a455a715-5cda-4e2a-b155-4d68c1f81129" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reservationreference</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>reservation</con:sourceStep>
            <con:sourcePath>reservationResult.reservationReference</con:sourcePath>
            <con:targetType>reservationReference</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="6549fd38-fd83-411d-bf54-cd5d7a89022f">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/bookings" methodName="Booking" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="0ee0b8c8-1e27-47af-8dd6-01b6d2225aec" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{"bookingRequest": {
   "bookingFee": "${DataSource#bookingFee}",
   "reservationReference": "${#Project#reservationReference}",
   "agentBookingReference": "${DataSource#agentBookingReference}",
   "currencyCode": "${DataSource#currencyCode}",
   "paymentMethod": "${DataSource#paymentMethod}",
   "notes": "${DataSource#notes}",
   "ticketPerPassenger": "${DataSource#ticketPerPassenger}",
   "leadGuest":    {
      "firstname": "${DataSource#leadGuest. Firstname}",
      "lastname": "${DataSource#lastname}",
      "email": "${DataSource#email}",
      "phone": "${DataSource#phone}",
      "mobile": "${DataSource#mobile}"
   },
   "products": {"product": [   {
      "productId": "${DataSource#productId}",
      "dateOfTravel": "${DataSource#dateOfTravel}",
      "preferences": "${DataSource#preferences}",
      "discountAmount": "${DataSource#discountAmount}",
      "discountCode": "${DataSource#discountCode}",
      "promoCode": "${DataSource#promoCode}",
      "currencyCode": "${DataSource#product.currencyCode}",
      "price": "${DataSource#price}",
      "items":       [
                  {
            "category": "${DataSource#category1}",
            "quantity": "${DataSource#quantity1}"
         },
                  {
            "category": "${DataSource#category2}",
            "quantity": "${DataSource#quantity2}"
         }
      ]
   }]}
}}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/bookings</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="8bdda8ba-ec58-4047-b82b-5b7b71988016">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>errorMessage</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="6461a547-f621-4b6a-bf9b-4c96bea85707">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#System Test Case}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#System Test Case}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Requestss#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="0482f190-6e37-4764-945b-3eabbb714849">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A6</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#System Test Case}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#Project#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#Project#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#Project#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="016a994b-a6f2-4547-a290-c0f007c0a2c6">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>reservation</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value>Internal system failure, please try again</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{"status":"ERROR", "code":"500", "message":"Internal system failure, please try again"  , "reservationResult": {"status":"NOT_RESERVED"} }</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>d65b6c7f-993f-4564-b6a1-29f1a0372e24</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>a455a715-5cda-4e2a-b155-4d68c1f81129</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>c40f45d6-409a-4531-9d62-1ebede4e4046</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="0329eab5-7c71-46dc-9af8-78e5a9f2ef60" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="booking_MO" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="b44cb442-c13b-450c-91df-de1d31317009">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_Booking_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Booking\\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>MO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Booking_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="155b93e6-e166-46d9-a357-c59c8f60e8d7">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>MO</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>System Test Case</con:property>
          <con:property>Description (Optional)</con:property>
          <con:property>authorization</con:property>
          <con:property>contentType</con:property>
          <con:property>currencyCode</con:property>
          <con:property>bookingFee</con:property>
          <con:property>paymentMethod</con:property>
          <con:property>agentBookingReference</con:property>
          <con:property>ticketPerPassenger</con:property>
          <con:property>leadGuest. Firstname</con:property>
          <con:property>lastname</con:property>
          <con:property>Email</con:property>
          <con:property>phone</con:property>
          <con:property>mobile</con:property>
          <con:property>dateOfTravel</con:property>
          <con:property>preferences</con:property>
          <con:property>discountAmount</con:property>
          <con:property>discountCode</con:property>
          <con:property>promoCode</con:property>
          <con:property>product.currencyCode</con:property>
          <con:property>price</con:property>
          <con:property>category1</con:property>
          <con:property>quantity1</con:property>
          <con:property>category2</con:property>
          <con:property>quantity2</con:property>
          <con:property>Expected Result</con:property>
          <con:property>Actual Reslult</con:property>
          <con:property>JIRA ID</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="reservation" id="072b542a-cfc6-4702-9beb-c486c2cfcc2a" disabled="true">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations" methodName="Reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="reservation" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${DataSource#Authorization}"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>https://bb-web-api-g.eu.cloudhub.io</con:endpoint>
            <con:request>{
	"reservationRequest": {
		"reservationFee": "5",
		"currencyCode": "USD",
		"paymentMethod": "cash",
		"notes": "custom notes",
		"reserveUntil": "2018-05-10",
		"leadGuest": {
			"firstname": "Test",
			"lastname": "Test",
			"email": "abc@test.com",
			"phone": "1234567890",
			"mobile": "1234567890"
		},
		"products": {
			"product": [{
				"productId": "3GZ00103",
				"dateOfTravel": "2018-05-10",
				"items": [{
						"category": "Adult",
						"quantity": "2"
					},
					{
						"category": "Child",
						"quantity": "1"
					}
				]
			}]
		}
	}
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="reservationreference transfer" id="1b4d5177-4eb1-4ea5-a35c-62ac25b4f504" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reservationreference</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>reservation</con:sourceStep>
            <con:sourcePath>reservationResult.reservationReference</con:sourcePath>
            <con:targetType>reservationReference</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="f5550c9c-9023-427e-9377-fdd50aeb93e7">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/bookings" methodName="Booking" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{"bookingRequest": {
   "bookingFee": "${DataSource#bookingFee}",
   "reservationReference": "${#Project#reservationReference}",
   "agentBookingReference": "${DataSource#agentBookingReference}",
   "currencyCode": "${DataSource#currencyCode}",
   "paymentMethod": "${DataSource#paymentMethod}",
   "notes": "${DataSource#notes}",
   "ticketPerPassenger": "${DataSource#ticketPerPassenger}",
   "leadGuest":    {
      "firstname": "${DataSource#leadGuest. Firstname}",
      "lastname": "${DataSource#lastname}",
      "email": "${DataSource#email}",
      "phone": "${DataSource#phone}",
      "mobile": "${DataSource#mobile}"
   },
   "products": {"product": [   {
      "productId": "${DataSource#productId}",
      "dateOfTravel": "${DataSource#dateOfTravel}",
      "preferences": "${DataSource#preferences}",
      "discountAmount": "${DataSource#discountAmount}",
      "discountCode": "${DataSource#discountCode}",
      "promoCode": "${DataSource#promoCode}",
      "currencyCode": "${DataSource#product.currencyCode}",
      "price": "${DataSource#price}",
      "items":       [
                  {
            "category": "${DataSource#category1}",
            "quantity": "${DataSource#quantity1}"
         },
                  {
            "category": "${DataSource#category2}",
            "quantity": "${DataSource#quantity2}"
         }
      ]
   }]}
}}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="84fc1001-f082-4d78-a87d-206f378fcf76">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>errorMessage</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="886f713b-cce9-4713-9470-0aec215b7e97">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#System Test Case}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#System Test Case}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="d2ff8ed4-389e-4a19-9127-9c53f69fc253">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A15</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#System Test Case}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#Project#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#Project#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#Project#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="8b293908-23b7-4d66-a6cc-6b853ed78de4">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>reservation</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value>Internal system failure, please try again</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{"status":"ERROR", "code":"500", "message":"Internal system failure, please try again"  , "reservationResult": {"status":"NOT_RESERVED"} }</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>155b93e6-e166-46d9-a357-c59c8f60e8d7</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>072b542a-cfc6-4702-9beb-c486c2cfcc2a</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>1b4d5177-4eb1-4ea5-a35c-62ac25b4f504</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>f5550c9c-9023-427e-9377-fdd50aeb93e7</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="9d46dd44-a941-41dc-9991-ddf92ca94000" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="booking_ID" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="100c8f4f-626b-4b44-9003-0c04b78e9bf0">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_Booking_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\Booking\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>ID</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Booking_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="bac4f164-177c-452a-b800-759410c1d592">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>ID</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>System Test Case</con:property>
          <con:property>Description (Optional)</con:property>
          <con:property>authorization</con:property>
          <con:property>contentType</con:property>
          <con:property>currencyCode</con:property>
          <con:property>bookingFee</con:property>
          <con:property>paymentMethod</con:property>
          <con:property>agentBookingReference</con:property>
          <con:property>ticketPerPassenger</con:property>
          <con:property>leadGuest. Firstname</con:property>
          <con:property>lastname</con:property>
          <con:property>Email</con:property>
          <con:property>phone</con:property>
          <con:property>mobile</con:property>
          <con:property>dateOfTravel</con:property>
          <con:property>preferences</con:property>
          <con:property>discountAmount</con:property>
          <con:property>discountCode</con:property>
          <con:property>promoCode</con:property>
          <con:property>price</con:property>
          <con:property>category1</con:property>
          <con:property>quantity1</con:property>
          <con:property>category2</con:property>
          <con:property>quantity2</con:property>
          <con:property>Expected Result</con:property>
          <con:property>Actual Reslult</con:property>
          <con:property>JIRA ID</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="reservation" id="bfd9efe8-a41c-4a70-9c0a-c7b9629bec75" disabled="true">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations" methodName="Reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="reservation" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${DataSource#Authorization}"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>https://bb-web-api-g.eu.cloudhub.io</con:endpoint>
            <con:request>{
	"reservationRequest": {
		"reservationFee": "5",
		"currencyCode": "USD",
		"paymentMethod": "cash",
		"notes": "custom notes",
		"reserveUntil": "2018-05-10",
		"leadGuest": {
			"firstname": "Test",
			"lastname": "Test",
			"email": "abc@test.com",
			"phone": "1234567890",
			"mobile": "1234567890"
		},
		"products": {
			"product": [{
				"productId": "3GZ00103",
				"dateOfTravel": "2018-05-10",
				"items": [{
						"category": "Adult",
						"quantity": "2"
					},
					{
						"category": "Child",
						"quantity": "1"
					}
				]
			}]
		}
	}
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="reservationreference transfer" id="1398920b-2cea-4cd1-9336-b86538afeff3" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reservationreference</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>reservation</con:sourceStep>
            <con:sourcePath>reservationResult.reservationReference</con:sourcePath>
            <con:targetType>reservationReference</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="ee9a78a5-29b1-4858-a5ad-49748b648aba">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/bookings" methodName="Booking" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{"bookingRequest": {
   "bookingFee": "${DataSource#bookingFee}",
   "reservationReference": "${#Project#reservationReference}",
   "agentBookingReference": "${DataSource#agentBookingReference}",
   "currencyCode": "${DataSource#currencyCode}",
   "paymentMethod": "${DataSource#paymentMethod}",
   "notes": "${DataSource#notes}",
   "ticketPerPassenger": "${DataSource#ticketPerPassenger}",
   "leadGuest":    {
      "firstname": "${DataSource#leadGuest. Firstname}",
      "lastname": "${DataSource#lastname}",
      "email": "${DataSource#email}",
      "phone": "${DataSource#phone}",
      "mobile": "${DataSource#mobile}"
   },
   "products": {"product": [   {
      "productId": "${DataSource#productId}",
      "dateOfTravel": "${DataSource#dateOfTravel}",
      "preferences": "${DataSource#preferences}",
      "discountAmount": "${DataSource#discountAmount}",
      "discountCode": "${DataSource#discountCode}",
      "promoCode": "${DataSource#promoCode}",
      "currencyCode": "${DataSource#product.currencyCode}",
      "price": "${DataSource#price}",
      "items":       [
                  {
            "category": "${DataSource#category1}",
            "quantity": "${DataSource#quantity1}"
         },
                  {
            "category": "${DataSource#category2}",
            "quantity": "${DataSource#quantity2}"
         }
      ]
   }]}
}}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="befa0cf0-eb7e-447d-92fe-78b460ba90e9">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>errorMessage</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#Project#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="5e4dd007-9441-40de-bced-633b6c6d834f">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#System Test Case}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#System Test Case}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="f537b36f-6ecb-4439-9beb-a68edf7b1235">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A17</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#System Test Case}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#Project#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#Project#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#Project#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="af1709ee-fb4e-4e48-a204-9e0fe1d2c530">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>reservation</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value>Internal system failure, please try again</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{"status":"ERROR", "code":"500", "message":"Internal system failure, please try again"  , "reservationResult": {"status":"NOT_RESERVED"} }</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite id="0e245d0a-b269-4437-b08c-4aa0300aefc4" name="CancelReservation_TestSuite">
    <con:description>TestSuite generated for REST Service [http://bb-gyg-api-dev.cloudhub.io]</con:description>
    <con:settings/>
    <con:savedRecentRuns>1</con:savedRecentRuns>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="66115985-bbda-4099-8dfc-2abe7b8641cd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CancelReservation_BMO" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="0d277174-3837-48bd-9561-958b09c4ffa7">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusESCancelReservation_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Reservation_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="353bb63f-c554-422d-9b2c-bef7f74017d2">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>BMO</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>Test Case</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>productId</con:property>
          <con:property>fromDate</con:property>
          <con:property>toDate</con:property>
          <con:property>quantity</con:property>
          <con:property>auth</con:property>
          <con:property>contentType</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="29fdc559-8fb6-4516-8f47-3052dce7d33c">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations/${#Project#reservationReference}/cancel" methodName="Cancel-reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="d05ce3fe-6e2a-4ee0-ab66-18cc24ba9565" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{
  "cancelReservationRequest": {
    "reservationReference": "${#Project#reservationReference}"
  }
}</con:request>
            <con:originalUri>http://bb-gyg-api-dev.cloudhub.io/api/1/cancel-reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request2" id="d8458a1f-062d-4ec6-a7c2-4d734853f672" disabled="true">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations" methodName="Reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request2" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${DataSource#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>https://bb-web-api-g.eu.cloudhub.io</con:endpoint>
            <con:request>{
  "reservationRequest": {
    "reservationFee": "${DataSource#reservationFee}",
     "reservationReference": "${DataSource#reservationReference}",
    
    "currencyCode": "${DataSource#currencyCode}",
    "paymentMethod": "${DataSource#paymentMethod}",
    "notes": "${DataSource#notes}",
    "reserveUntil": "${DataSource#reserveUntil}",
    "underName": {
      "firstname": "${DataSource#firstname}",
      "lastname": "${DataSource#lastname}",
      "email": "${DataSource#email}",
      "phone": "${DataSource#phone}",
      "mobile": "${DataSource#mobile}"
    },
    "products": {
      "product": [
        {
          "productId": "${DataSource#productId}",
          "eventId": "${DataSource#eventId}"
          "dateOfTravel": "${DataSource#dateOfTravel}",
          "items": [
            {
              "category": "${DataSource#category}",
              "quantity": "${DataSource#quantity}"
            },
            {
              "category": "${DataSource#category1}",
              "quantity": "${DataSource#quantity1}"
            }
          ]
        }
      ]
    }
  }
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="935cfcbd-e602-42fd-9cca-49fdcffaf88f">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.message[0]</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="fb83e173-4b12-4fbf-9674-133e8054def3">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request2#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="07915470-8bad-4760-aa09-bb1bc7c01ed1">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A4</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="5c741034-3116-4f8f-8bc6-d7067aee4a49">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{ "status":"SUCCESS", "code":"","message":"","cancelReservationResult": {"status": "CANCELLED" }}</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>29fdc559-8fb6-4516-8f47-3052dce7d33c</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="516ecfa1-a5f8-4bdd-a122-4930ffa85b99" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CancelReservation_MM" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="6bdb1c9b-f41a-4278-9067-521a072d0c19">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusESCancelReservation_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Reservation_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="e1e7ceae-1408-4111-8c6c-ae5c6b54168a">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>MM</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>Test Case</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>productId</con:property>
          <con:property>fromDate</con:property>
          <con:property>toDate</con:property>
          <con:property>quantity</con:property>
          <con:property>auth</con:property>
          <con:property>contentType</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="518fe02e-00d9-4354-bed4-a73516b61c0e">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations/${#Project#reservationReference}/cancel" methodName="Cancel-reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="d05ce3fe-6e2a-4ee0-ab66-18cc24ba9565" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{
  "cancelReservationRequest": {
    "reservationReference": "${#Project#reservationReference}"
  }
}</con:request>
            <con:originalUri>http://bb-gyg-api-dev.cloudhub.io/api/1/cancel-reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request1" id="191722b4-e418-4f1f-9686-59212f05b8d0" disabled="true">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations" methodName="Reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request1" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${DataSource#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>https://bb-web-api-g.eu.cloudhub.io</con:endpoint>
            <con:request>{
  "reservationRequest": {
    "reservationFee": "${DataSource#reservationFee}",
     "reservationReference": "${DataSource#reservationReference}",
    
    "currencyCode": "${DataSource#currencyCode}",
    "paymentMethod": "${DataSource#paymentMethod}",
    "notes": "${DataSource#notes}",
    "reserveUntil": "${DataSource#reserveUntil}",
    "underName": {
      "firstname": "${DataSource#firstname}",
      "lastname": "${DataSource#lastname}",
      "email": "${DataSource#email}",
      "phone": "${DataSource#phone}",
      "mobile": "${DataSource#mobile}"
    },
    "products": {
      "product": [
        {
          "productId": "${DataSource#productId}",
          "dateOfTravel": "${DataSource#dateOfTravel}",
          "items": [
            {
              "category": "${DataSource#category}",
              "quantity": "${DataSource#quantity}"
            },
            {
              "category": "${DataSource#category1}",
              "quantity": "${DataSource#quantity1}"
            }
          ]
        }
      ]
    }
  }
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="1a0845fc-4369-44c1-8bea-8fce3c4d01cc">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>message</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="5e3ecadb-a19d-4b0b-873b-ab3a2fb7197c">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request1#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="0653b8ff-4433-42f7-82e5-a4fc464030c1">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A7</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="a9180d5a-7f56-4dfe-83ce-e9730765dfe3">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{ "status":"SUCCESS", "code":"","message":"","cancelReservationResult": {"status": "CANCELLED" }}</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>518fe02e-00d9-4354-bed4-a73516b61c0e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="c55bebb4-be7e-43c2-b7c2-f6ddaa2dc93e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CancelReservation_MO" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="6b2bc604-736c-424a-9f8a-7819ae35bda7">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusESCancelReservation_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Reservation_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="d2eb239a-6d12-4a84-a975-22db2d95e41e">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>MO</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>Test Case</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>productId</con:property>
          <con:property>fromDate</con:property>
          <con:property>toDate</con:property>
          <con:property>quantity</con:property>
          <con:property>auth</con:property>
          <con:property>contentType</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="75832745-972c-4237-9564-b14c896be3e6">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations/${#Project#reservationReference}/cancel" methodName="Cancel-reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="d05ce3fe-6e2a-4ee0-ab66-18cc24ba9565" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{
  "cancelReservationRequest": {
    "reservationReference": "${#Project#reservationReference}"
  }
}</con:request>
            <con:originalUri>http://bb-gyg-api-dev.cloudhub.io/api/1/cancel-reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request1" id="ce31fa58-b514-46b2-957e-b5302bf3d145" disabled="true">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations" methodName="Reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request1" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${DataSource#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>https://bb-web-api-g.eu.cloudhub.io</con:endpoint>
            <con:request>{
  "reservationRequest": {
    "reservationFee": "${DataSource#reservationFee}",
     "reservationReference": "${DataSource#reservationReference}",
    
    "currencyCode": "${DataSource#currencyCode}",
    "paymentMethod": "${DataSource#paymentMethod}",
    "notes": "${DataSource#notes}",
    "reserveUntil": "${DataSource#reserveUntil}",
    "underName": {
      "firstname": "${DataSource#firstname}",
      "lastname": "${DataSource#lastname}",
      "email": "${DataSource#email}",
      "phone": "${DataSource#phone}",
      "mobile": "${DataSource#mobile}"
    },
    "products": {
      "product": [
        {
          "productId": "${DataSource#productId}",
          "dateOfTravel": "${DataSource#dateOfTravel}",
          "items": [
            {
              "category": "${DataSource#category}",
              "quantity": "${DataSource#quantity}"
            },
            {
              "category": "${DataSource#category1}",
              "quantity": "${DataSource#quantity1}"
            }
          ]
        }
      ]
    }
  }
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="0df13477-b02f-4fdb-9cbb-9c186ae934d1">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>message</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="b68d1f0c-e5b2-43da-8ef5-f192a598db70">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request1#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="872353fb-89e3-46fe-a4ea-e3fe807f8bac">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A13</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="e6b2942b-91b3-4247-a912-1a7222b32205">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{ "status":"SUCCESS", "code":"","message":"","cancelReservationResult": {"status": "CANCELLED" }}</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>75832745-972c-4237-9564-b14c896be3e6</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="68a91b76-3b68-4116-8095-118cd7709a63" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CancelReservation_ID" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="416f0a4f-4fe3-404c-99cf-35cfda800c10">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusESCancelReservation_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Reservation_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="67fd0453-db93-4063-bc49-4a63196d4f0c">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>ID</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>Test Case</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>productId</con:property>
          <con:property>fromDate</con:property>
          <con:property>toDate</con:property>
          <con:property>quantity</con:property>
          <con:property>auth</con:property>
          <con:property>contentType</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="b19c25bd-ee40-4566-b4fe-baa367cece03">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations/${#Project#reservationReference}/cancel" methodName="Cancel-reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="d05ce3fe-6e2a-4ee0-ab66-18cc24ba9565" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{
  "cancelReservationRequest": {
    "reservationReference": "${#Project#reservationReference}"
  }
}</con:request>
            <con:originalUri>http://bb-gyg-api-dev.cloudhub.io/api/1/cancel-reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request1" id="514f4d78-0d7a-4135-b599-21d224511fb9" disabled="true">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/reservations" methodName="Reservation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request1" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${DataSource#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>https://bb-web-api-g.eu.cloudhub.io</con:endpoint>
            <con:request>{
  "reservationRequest": {
    "reservationFee": "${DataSource#reservationFee}",
     "reservationReference": "${DataSource#reservationReference}",
    
    "currencyCode": "${DataSource#currencyCode}",
    "paymentMethod": "${DataSource#paymentMethod}",
    "notes": "${DataSource#notes}",
    "reserveUntil": "${DataSource#reserveUntil}",
    "underName": {
      "firstname": "${DataSource#firstname}",
      "lastname": "${DataSource#lastname}",
      "email": "${DataSource#email}",
      "phone": "${DataSource#phone}",
      "mobile": "${DataSource#mobile}"
    },
    "products": {
      "product": [
        {
          "productId": "${DataSource#productId}",
          "dateOfTravel": "${DataSource#dateOfTravel}",
          "items": [
            {
              "category": "${DataSource#category}",
              "quantity": "${DataSource#quantity}"
            },
            {
              "category": "${DataSource#category1}",
              "quantity": "${DataSource#quantity1}"
            }
          ]
        }
      ]
    }
  }
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="8f668b5b-37b7-4efe-bf40-fb9f7070edd4">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>message</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="525ee3ab-f120-458a-bcf6-4c79af4f7d90">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request1#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="a662375b-5d08-428b-9d6e-ed103e650f2c">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A15</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="5f65a9f1-16c8-4768-93a6-95640691c971">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{ "status":"SUCCESS", "code":"","message":"","cancelReservationResult": {"status": "CANCELLED" }}</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b19c25bd-ee40-4566-b4fe-baa367cece03</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite id="e2aea8d6-4f87-4ea3-912e-7a829bae516d" name="CancelBooking_TestSuite">
    <con:description>TestSuite generated for REST Service [http://bb-gyg-api-dev.cloudhub.io]</con:description>
    <con:settings/>
    <con:savedRecentRuns>1</con:savedRecentRuns>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="da42ac70-0c43-4c7f-97ae-85953c5ea191" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CancelBooking_BMO" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="e73d52eb-5e89-42c0-9c17-1ffac1bd1276">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusESCancelBooking_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Reservation_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="9f329276-d7e5-454b-826f-b0342c51bb32">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>BMO</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>Test Case</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>productId</con:property>
          <con:property>fromDate</con:property>
          <con:property>toDate</con:property>
          <con:property>quantity</con:property>
          <con:property>auth</con:property>
          <con:property>contentType</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="8573c806-1f58-4fae-9cb5-643e9b283089">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/bookings/${#Project#bookingReference}/cancel" methodName="Cancel-Booking" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{
  "cancelBookingRequest": {
    "bookingReference": "${#Project#bookingReference}"
  }
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:assertion type="XPath Match" id="5ace9806-9d4a-4f6a-a910-bb367c310c55" name="XPath Match">
              <con:configuration/>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="ec24fd6e-5f23-49b0-a767-ab1146c668fc">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>message</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="d7e922ae-158c-4104-bda2-7b9b98c0ae89">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="cbf15458-96b3-4ee4-90cf-1964cb4fe60d">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A4</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="f98a7225-41b2-49a0-b63c-265cbca78518">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{ "status":"ERROR", "errorCode":"BB-402","errorMessage":"Transaction is already cancelled","data": {}}</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="ee75f140-9948-4846-94be-99c44d471002" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CancelBooking_MM" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="863668fc-579b-4970-9623-280a2f97b31e">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusESCancelBooking_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Reservation_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="91373d31-c351-48e7-8e9e-fa8be6f2bf2a">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>MM</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>Test Case</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>productId</con:property>
          <con:property>fromDate</con:property>
          <con:property>toDate</con:property>
          <con:property>quantity</con:property>
          <con:property>auth</con:property>
          <con:property>contentType</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="96fcebbe-d787-4042-be65-f88528615ae6">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/bookings/${#Project#bookingReference}/cancel" methodName="Cancel-Booking" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{
  "cancelBookingRequest": {
    "bookingReference": "${#Project#bookingReference}"
  }
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="31af0423-b366-4ee5-8f22-43ad7ccb577d">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>message</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="4bd4115f-521f-4e95-8e95-dfb4f03c01f0">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="b05827f8-7eb4-4095-be9c-62b65bb947d9">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A7</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="8a8fdd76-971a-4574-89ba-6866e8d51194">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{ "status":"ERROR", "errorCode":"BB-402","errorMessage":"Transaction is already cancelled","data": {}}</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>96fcebbe-d787-4042-be65-f88528615ae6</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="2a9b587a-2ddf-4dfd-bbcf-0533b5575893" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CancelBooking_MO" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="d04449e5-b144-4a41-a0f0-e8042cd2672b">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusESCancelBooking_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Reservation_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="3a2749aa-a1fc-4393-95cc-3da4d691c076">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>MO</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>Test Case</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>productId</con:property>
          <con:property>fromDate</con:property>
          <con:property>toDate</con:property>
          <con:property>quantity</con:property>
          <con:property>auth</con:property>
          <con:property>contentType</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="41a98197-4ba1-44d4-884b-91273b74d74e">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/bookings/${#Project#bookingReference}/cancel" methodName="Cancel-Booking" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{
  "cancelBookingRequest": {
    "bookingReference": "${#Project#bookingReference}"
  }
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:assertion type="XPath Match" id="5ace9806-9d4a-4f6a-a910-bb367c310c55" name="XPath Match">
              <con:configuration/>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="275c91a3-2524-4be3-a7df-754b35d744bb">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>errorMessage</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="ee7363d8-e952-4c41-81cd-800c97b914e5">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="3f06b28f-4d14-40c5-815b-ea5dde7ea5d5">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A16</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="beb40e8b-eac4-4ec3-8c6c-3f485b9359d1">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value>Transaction is already cancelled</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{ "status":"ERROR", "errorCode":"BB-402","errorMessage":"Transaction is already cancelled","data": {}}</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>41a98197-4ba1-44d4-884b-91273b74d74e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="75b20cec-09f4-4141-bc55-9736e44e6264" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CancelBooking_ID" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="e5799a18-f2b1-4cf3-b7ff-a9821abfdb59">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusESCancelBooking_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Reservation_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="cc9cddf0-8aca-441c-8f83-327f2152be0f">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <worksheet>ID</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>Test Case</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>productId</con:property>
          <con:property>fromDate</con:property>
          <con:property>toDate</con:property>
          <con:property>quantity</con:property>
          <con:property>auth</con:property>
          <con:property>contentType</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="1f996a6c-0d1c-490b-90b6-fe13ba75e745">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/bookings/${#Project#bookingReference}/cancel" methodName="Cancel-Booking" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#Authorization}"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>${#Project#endpoint}</con:endpoint>
            <con:request>{
  "cancelBookingRequest": {
    "bookingReference": "${#Project#bookingReference}"
  }
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:assertion type="XPath Match" id="5ace9806-9d4a-4f6a-a910-bb367c310c55" name="XPath Match">
              <con:configuration/>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="963ac748-1229-4c76-adc0-add581f23cd7">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>errorMessage</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="18a1875b-288e-44ea-b172-116550582cc9">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="e8f89db2-0eda-4a7f-992e-eafb1b3669f5">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>${Properties#Source}</file>
              <outfile>${Properties#Source}</outfile>
              <worksheet>Results</worksheet>
              <cell>A28</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="f9181e66-f459-4323-8694-0e208a1c8308">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value>Transaction is already cancelled</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{ "status":"ERROR", "errorCode":"BB-402","errorMessage":"Transaction is already cancelled","data": {}}</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>1f996a6c-0d1c-490b-90b6-fe13ba75e745</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite id="169eabb0-c4fe-4419-8f59-48d6f634f529" name="Redemption_TestSuite" disabled="true">
    <con:settings/>
    <con:savedRecentRuns>1</con:savedRecentRuns>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="872697af-c9c6-40fc-b1d5-bb772774897a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Redemption_BMO" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="cc89d75e-22c9-4b06-b5f8-bf9fd2f53a7e">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_Booking_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Booking_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="c39fc492-25cb-4168-98c3-1c97d53ca7fc">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>D:/Vimala@625/Projects/BigBus/Empire State/Testing/TestSuites/TestData/BigBusES_Booking_TestData.xlsx</file>
              <worksheet>BMO</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>TestCase</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>bookingFee</con:property>
          <con:property>agentBookingReference</con:property>
          <con:property>reservationReference</con:property>
          <con:property>currencyCode</con:property>
          <con:property>paymentMethod</con:property>
          <con:property>notes</con:property>
          <con:property>ticketPerPassenger</con:property>
          <con:property>firstname</con:property>
          <con:property>lastname</con:property>
          <con:property>email</con:property>
          <con:property>phone</con:property>
          <con:property>mobile</con:property>
          <con:property>productId</con:property>
          <con:property>dateOfTravel</con:property>
          <con:property>preferences</con:property>
          <con:property>discountAmount</con:property>
          <con:property>discountCode</con:property>
          <con:property>promoCode</con:property>
          <con:property>product.currencyCode</con:property>
          <con:property>price</con:property>
          <con:property>category</con:property>
          <con:property>quantity</con:property>
          <con:property>category1</con:property>
          <con:property>quantity1</con:property>
          <con:property>auth</con:property>
          <con:property>contentType</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="bfb04b1c-fc8c-4b84-ac6b-e53afee30b44">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/bookings" methodName="Booking" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="${DataSource#contentType}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>https://bb-redemption-web-api-v1-t.ir-e1.cloudhub.io</con:endpoint>
            <con:request>{
  "bookingRequest": {
    "bookingFee": "${DataSource#bookingFee}",
     "reservationReference": "${DataSource#reservationReference}",
    "agentBookingReference": "${DataSource#agentBookingReference}",
    "currencyCode": "${DataSource#currencyCode}",
    "paymentMethod": "${DataSource#paymentMethod}",
    "notes": "${DataSource#notes}",
      "ticketPerPassenger": "${DataSource#ticketPerPassenger}",
    "underName": {
      "firstname": "${DataSource#firstname}",
      "lastname": "${DataSource#lastname}",
      "email": "${DataSource#email}",
      "phone": "${DataSource#phone}",
      "mobile": "${DataSource#mobile}"
    },
    "products": {
      "product": [
        {
          "productId": "${DataSource#productId}",
          "dateOfTravel": "${DataSource#dateOfTravel}",
           "preferences": "${DataSource#preferences}",
          "discountAmount": "${DataSource#discountAmount}",
          "discountCode": "${DataSource#discountCode}",
          "promoCode": "${DataSource#promoCode}",
          "currencyCode": "${DataSource#product.currencyCode}",
          "price": "${DataSource#price}",
          "items": [
            {
              "category": "${DataSource#category}",
              "quantity": "${DataSource#quantity}"
            },
            {
              "category": "${DataSource#category1}",
              "quantity": "${DataSource#quantity1}"
            }
          ]
        }
      ]
    }
  }
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="c6c45c5c-643a-4c92-8a29-c88210b100e0">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>message</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="156fbde4-04c2-4763-97dc-29d5542abaad">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="1246ee4e-7dcc-41c5-bb0c-2815570cb883">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>D:/Vimala@625/Projects/BigBus/Empire State/Testing/TestSuites/TestData/BigBusES_Booking_TestData.xlsx</file>
              <outfile>D:/Vimala@625/Projects/BigBus/Empire State/Testing/TestSuites/TestData/BigBusES_Booking_TestData.xlsx</outfile>
              <worksheet>Results</worksheet>
              <cell>A4</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="973ed8a5-bf03-42ff-8c27-b34c465a94bc">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value>Internal system failure, please try again</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{"status":"ERROR", "code":"500", "message":"Internal system failure, please try again"  , "reservationResult": {"status":"NOT_RESERVED"} }</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="f091db06-7626-481d-b9f4-05807dcc70c8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Redemption_MM" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="1ff645ae-02ec-40a7-9920-e764c1e4b937">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_Booking_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Booking_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="bc1cb186-93a9-45f3-aa27-921a98712b29">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>D:/Vimala@625/Projects/BigBus/Empire State/Testing/TestSuites/TestData/BigBusES_Booking_TestData.xlsx</file>
              <worksheet>BMO</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>TestCase</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>bookingFee</con:property>
          <con:property>agentBookingReference</con:property>
          <con:property>reservationReference</con:property>
          <con:property>currencyCode</con:property>
          <con:property>paymentMethod</con:property>
          <con:property>notes</con:property>
          <con:property>ticketPerPassenger</con:property>
          <con:property>firstname</con:property>
          <con:property>lastname</con:property>
          <con:property>email</con:property>
          <con:property>phone</con:property>
          <con:property>mobile</con:property>
          <con:property>productId</con:property>
          <con:property>dateOfTravel</con:property>
          <con:property>preferences</con:property>
          <con:property>discountAmount</con:property>
          <con:property>discountCode</con:property>
          <con:property>promoCode</con:property>
          <con:property>product.currencyCode</con:property>
          <con:property>price</con:property>
          <con:property>category</con:property>
          <con:property>quantity</con:property>
          <con:property>category1</con:property>
          <con:property>quantity1</con:property>
          <con:property>auth</con:property>
          <con:property>contentType</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="205354bb-f72a-4f52-ba14-8658c0810ba6">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/bookings" methodName="Booking" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${DataSource#auth}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>https://bb-web-api-g.eu.cloudhub.io</con:endpoint>
            <con:request>{
  "bookingRequest": {
    "bookingFee": "${DataSource#bookingFee}",
     "reservationReference": "${DataSource#reservationReference}",
    "agentBookingReference": "${DataSource#agentBookingReference}",
    "currencyCode": "${DataSource#currencyCode}",
    "paymentMethod": "${DataSource#paymentMethod}",
    "notes": "${DataSource#notes}",
      "ticketPerPassenger": "${DataSource#ticketPerPassenger}",
    "underName": {
      "firstname": "${DataSource#firstname}",
      "lastname": "${DataSource#lastname}",
      "email": "${DataSource#email}",
      "phone": "${DataSource#phone}",
      "mobile": "${DataSource#mobile}"
    },
    "products": {
      "product": [
        {
          "productId": "${DataSource#productId}",
          "dateOfTravel": "${DataSource#dateOfTravel}",
           "preferences": "${DataSource#preferences}",
          "discountAmount": "${DataSource#discountAmount}",
          "discountCode": "${DataSource#discountCode}",
          "promoCode": "${DataSource#promoCode}",
          "currencyCode": "${DataSource#product.currencyCode}",
          "price": "${DataSource#price}",
          "items": [
            {
              "category": "${DataSource#category}",
              "quantity": "${DataSource#quantity}"
            },
            {
              "category": "${DataSource#category1}",
              "quantity": "${DataSource#quantity1}"
            }
          ]
        }
      ]
    }
  }
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="7866fc3c-d0d5-4867-bdfd-334c7d322676">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>message</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="77457094-6f98-4b9d-bc08-b13b9bfea2c9">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="3800a4b6-ecf7-446d-932d-b69aae94f2fa">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>D:/Vimala@625/Projects/BigBus/Empire State/Testing/TestSuites/TestData/BigBusES_Booking_TestData.xlsx</file>
              <outfile>D:/Vimala@625/Projects/BigBus/Empire State/Testing/TestSuites/TestData/BigBusES_Booking_TestData.xlsx</outfile>
              <worksheet>Results</worksheet>
              <cell>A7</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="14741d96-bc23-4104-b2d4-beb11ec42246">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value>Internal system failure, please try again</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{"status":"ERROR", "code":"500", "message":"Internal system failure, please try again"  , "reservationResult": {"status":"NOT_RESERVED"} }</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="a77ba452-c536-4f60-9694-3ca61b402bd1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Redemption_MO" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="bd6bc003-5192-49ac-9e18-9098f17cab62">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_Booking_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Booking_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="b454f007-38e4-4dc5-a4de-64b4c6dcf54a">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>D:/Vimala@625/Projects/BigBus/Empire State/Testing/TestSuites/TestData/BigBusES_Booking_TestData.xlsx</file>
              <worksheet>BMO</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>TestCase</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>bookingFee</con:property>
          <con:property>agentBookingReference</con:property>
          <con:property>reservationReference</con:property>
          <con:property>currencyCode</con:property>
          <con:property>paymentMethod</con:property>
          <con:property>notes</con:property>
          <con:property>ticketPerPassenger</con:property>
          <con:property>firstname</con:property>
          <con:property>lastname</con:property>
          <con:property>email</con:property>
          <con:property>phone</con:property>
          <con:property>mobile</con:property>
          <con:property>productId</con:property>
          <con:property>dateOfTravel</con:property>
          <con:property>preferences</con:property>
          <con:property>discountAmount</con:property>
          <con:property>discountCode</con:property>
          <con:property>promoCode</con:property>
          <con:property>product.currencyCode</con:property>
          <con:property>price</con:property>
          <con:property>category</con:property>
          <con:property>quantity</con:property>
          <con:property>category1</con:property>
          <con:property>quantity1</con:property>
          <con:property>auth</con:property>
          <con:property>contentType</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="1ec66bfe-9e2d-402a-a357-68328d0d4fe8">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/bookings" methodName="Booking" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${DataSource#auth}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>https://bb-web-api-g.eu.cloudhub.io</con:endpoint>
            <con:request>{
  "bookingRequest": {
    "bookingFee": "${DataSource#bookingFee}",
     "reservationReference": "${DataSource#reservationReference}",
    "agentBookingReference": "${DataSource#agentBookingReference}",
    "currencyCode": "${DataSource#currencyCode}",
    "paymentMethod": "${DataSource#paymentMethod}",
    "notes": "${DataSource#notes}",
      "ticketPerPassenger": "${DataSource#ticketPerPassenger}",
    "underName": {
      "firstname": "${DataSource#firstname}",
      "lastname": "${DataSource#lastname}",
      "email": "${DataSource#email}",
      "phone": "${DataSource#phone}",
      "mobile": "${DataSource#mobile}"
    },
    "products": {
      "product": [
        {
          "productId": "${DataSource#productId}",
          "dateOfTravel": "${DataSource#dateOfTravel}",
           "preferences": "${DataSource#preferences}",
          "discountAmount": "${DataSource#discountAmount}",
          "discountCode": "${DataSource#discountCode}",
          "promoCode": "${DataSource#promoCode}",
          "currencyCode": "${DataSource#product.currencyCode}",
          "price": "${DataSource#price}",
          "items": [
            {
              "category": "${DataSource#category}",
              "quantity": "${DataSource#quantity}"
            },
            {
              "category": "${DataSource#category1}",
              "quantity": "${DataSource#quantity1}"
            }
          ]
        }
      ]
    }
  }
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="4e0a02d1-7b3d-47c7-891c-c8f213de3fe3">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>message</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="ad2193b5-5aca-4ee2-88da-2e51a0663f6e">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="4546e622-54e6-4dc0-92e2-3f6839cacc06">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>D:/Vimala@625/Projects/BigBus/Empire State/Testing/TestSuites/TestData/BigBusES_Booking_TestData.xlsx</file>
              <outfile>D:/Vimala@625/Projects/BigBus/Empire State/Testing/TestSuites/TestData/BigBusES_Booking_TestData.xlsx</outfile>
              <worksheet>Results</worksheet>
              <cell>A16</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="8c30fb3b-3155-4745-ae44-9a88de3fff00">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value>Internal system failure, please try again</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{"status":"ERROR", "code":"500", "message":"Internal system failure, please try again"  , "reservationResult": {"status":"NOT_RESERVED"} }</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase id="43789c8f-5489-4430-9c32-d6ef476125e1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Redemption_ID" searchProperties="true">
      <con:description>TestCase generated for REST Resource [Get-availabilities] located at [/api/1/get-availabilities/]</con:description>
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="properties" name="Properties" id="beaa67ba-90f1-4769-9e8a-c59619f888b3">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>Source</con:name>
              <con:value>${projectDir}\TestData\BigBusES_Booking_TestData.xlsx</con:value>
            </con:property>
            <con:property>
              <con:name>SaveLocation</con:name>
              <con:value>${projectDir}\TestResults\</con:value>
            </con:property>
            <con:property>
              <con:name>TestDataSheetName</con:name>
              <con:value>BMO</con:value>
            </con:property>
            <con:property>
              <con:name>Filename</con:name>
              <con:value>BigBusES_Booking_TestData</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="4ab20fd4-5020-4f90-876e-dd595167bc86">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="Excel">
            <con:configuration>
              <file>D:/Vimala@625/Projects/BigBus/Empire State/Testing/TestSuites/TestData/BigBusES_Booking_TestData.xlsx</file>
              <worksheet>ID</worksheet>
              <cell>A7</cell>
              <ignoreEmpty>true</ignoreEmpty>
              <evaluateFormulas>false</evaluateFormulas>
            </con:configuration>
          </con:dataSource>
          <con:shared>true</con:shared>
          <con:restartShared>true</con:restartShared>
          <con:property>TestCase</con:property>
          <con:property>Description (optional)</con:property>
          <con:property>bookingFee</con:property>
          <con:property>agentBookingReference</con:property>
          <con:property>reservationReference</con:property>
          <con:property>currencyCode</con:property>
          <con:property>paymentMethod</con:property>
          <con:property>notes</con:property>
          <con:property>ticketPerPassenger</con:property>
          <con:property>firstname</con:property>
          <con:property>lastname</con:property>
          <con:property>email</con:property>
          <con:property>phone</con:property>
          <con:property>mobile</con:property>
          <con:property>productId</con:property>
          <con:property>dateOfTravel</con:property>
          <con:property>preferences</con:property>
          <con:property>discountAmount</con:property>
          <con:property>discountCode</con:property>
          <con:property>promoCode</con:property>
          <con:property>product.currencyCode</con:property>
          <con:property>price</con:property>
          <con:property>category</con:property>
          <con:property>quantity</con:property>
          <con:property>category1</con:property>
          <con:property>quantity1</con:property>
          <con:property>auth</con:property>
          <con:property>contentType</con:property>
          <con:completeLastOperation>true</con:completeLastOperation>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Request" id="678c1eb8-17dd-4ecf-8922-366901272957">
        <con:settings/>
        <con:config service="https://bb-web-api-g.eu.cloudhub.io" resourcePath="/api/1/bookings" methodName="Booking" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request" id="cfb18df7-cc8b-4352-99df-3674461cca3e" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${DataSource#auth}"/>
  &lt;con:entry key="Content-Type" value="${DataSource#contentType}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:endpoint>https://bb-web-api-g.eu.cloudhub.io</con:endpoint>
            <con:request>{
  "bookingRequest": {
    "bookingFee": "${DataSource#bookingFee}",
     "reservationReference": "${DataSource#reservationReference}",
    "agentBookingReference": "${DataSource#agentBookingReference}",
    "currencyCode": "${DataSource#currencyCode}",
    "paymentMethod": "${DataSource#paymentMethod}",
    "notes": "${DataSource#notes}",
      "ticketPerPassenger": "${DataSource#ticketPerPassenger}",
    "underName": {
      "firstname": "${DataSource#firstname}",
      "lastname": "${DataSource#lastname}",
      "email": "${DataSource#email}",
      "phone": "${DataSource#phone}",
      "mobile": "${DataSource#mobile}"
    },
    "products": {
      "product": [
        {
          "productId": "${DataSource#productId}",
          "dateOfTravel": "${DataSource#dateOfTravel}",
           "preferences": "${DataSource#preferences}",
          "discountAmount": "${DataSource#discountAmount}",
          "discountCode": "${DataSource#discountCode}",
          "promoCode": "${DataSource#promoCode}",
          "currencyCode": "${DataSource#product.currencyCode}",
          "price": "${DataSource#price}",
          "items": [
            {
              "category": "${DataSource#category}",
              "quantity": "${DataSource#quantity}"
            },
            {
              "category": "${DataSource#category1}",
              "quantity": "${DataSource#quantity1}"
            }
          ]
        }
      ]
    }
  }
}</con:request>
            <con:originalUri>https://bb-web-api-g.eu.cloudhub.io/api/1/reservation</con:originalUri>
            <con:credentials>
              <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="d0e501c7-6f7e-4149-92cd-ea3c051ce098">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>status</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>.status[0]</con:sourcePath>
            <con:targetType>status</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:targetPath/>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>reason</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath>message</con:sourcePath>
            <con:targetType>reason</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>response</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Request</con:sourceStep>
            <con:sourcePath/>
            <con:targetType>response</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:targetTransferType>JSONPATH</con:targetTransferType>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SaveXmls" id="5e8aca97-84b8-4ffb-a13d-9793e2d26869">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def name = context.expand( '${Properties#Filename}' )
def location = context.expand( '${Properties#SaveLocation}' )
def getResponseFilename(name) {
   count = ( testRunner.testCase.testSteps["DataSource"].currentRow )
   date = new Date()
   dateFormat = new java.text.SimpleDateFormat('yyyyMMdd-kkmmss')
   shortDate = dateFormat.format(date)
def testCaseID = context.expand( '${DataSource#TestCaseID}' )
   respFilename = shortDate + "-" + testCaseID + "-response.xml"  // implicitely returned
}

def getRequestFilename(name) {  
	def testCaseID = context.expand( '${DataSource#TestCaseID}' ) 
	reqFilename = shortDate + "-" + testCaseID + "-request.xml"  // implicitely returned
}
	
def file = new PrintWriter (location + getResponseFilename(name))
def Response = testRunner.testCase.testSteps["Request"].testRequest.response.contentAsString
file.println(Response)
file.flush()
file.close()

def file2 = new PrintWriter (location + getRequestFilename(name))
def Request = context.expand( '${Request#Request}' )
file2.println(Request)
file2.flush()
file2.close()</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasink" name="DataSink" id="6ee8cf45-68a4-4c66-b2b7-7010ca8c802d">
        <con:settings/>
        <con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSink type="Excel">
            <con:configuration>
              <file>D:/Vimala@625/Projects/BigBus/Empire State/Testing/TestSuites/TestData/BigBusES_Booking_TestData.xlsx</file>
              <outfile>D:/Vimala@625/Projects/BigBus/Empire State/Testing/TestSuites/TestData/BigBusES_Booking_TestData.xlsx</outfile>
              <worksheet>Results</worksheet>
              <cell>A35</cell>
              <evaluateFormulas>false</evaluateFormulas>
              <append>false</append>
            </con:configuration>
          </con:dataSink>
          <con:properties>
            <con:property>
              <con:name>TestCase</con:name>
              <con:value>${DataSource#TestCase}</con:value>
            </con:property>
            <con:property>
              <con:name>Test Case Status</con:name>
              <con:value>${#TestCase#status}</con:value>
            </con:property>
            <con:property>
              <con:name>FailReason</con:name>
              <con:value>${#TestCase#reason}</con:value>
            </con:property>
            <con:property>
              <con:name>response</con:name>
              <con:value>${#TestCase#response}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop" id="285b4d71-83ff-480c-b1f0-4692cb83cb22">
        <con:settings/>
        <con:config>
          <dataSourceStep>DataSource</dataSourceStep>
          <targetStep>Request</targetStep>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>status</con:name>
          <con:value>ERROR</con:value>
        </con:property>
        <con:property>
          <con:name>reason</con:name>
          <con:value>Internal system failure, please try again</con:value>
        </con:property>
        <con:property>
          <con:name>response</con:name>
          <con:value>{"status":"ERROR", "code":"500", "message":"Internal system failure, please try again"  , "reservationResult": {"status":"NOT_RESERVED"} }</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>a8e63a98-f114-494c-b310-581024bdeacd</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:endpoint mode="OVERRIDE">https://bb-web-api-d.eu.cloudhub.io</con:endpoint>
    <con:endpoint mode="OVERRIDE">https://bb_redeem_api.d.eu.cloudhub.io</con:endpoint>
  </con:endpointStrategy>
  <con:requirements/>
  <con:properties>
    <con:property>
      <con:name>status</con:name>
      <con:value>SUCCESS</con:value>
    </con:property>
    <con:property>
      <con:name>reason</con:name>
      <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </con:property>
    <con:property>
      <con:name>response</con:name>
      <con:value>Availability Request:54493</con:value>
    </con:property>
    <con:property>
      <con:name>endpoint</con:name>
      <con:value>https://bb-web-api-d.eu.cloudhub.io</con:value>
    </con:property>
    <con:property>
      <con:name>reservationReference</con:name>
      <con:value>2d0dcd9e-9dd1-4123-99c4-cd6e1037b7ac</con:value>
    </con:property>
    <con:property>
      <con:name>eventId</con:name>
      <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </con:property>
    <con:property>
      <con:name>Authorization</con:name>
      <con:value>Basic YzMxZjJlYWQ2NDY3NDhkNjlhZTE0NDkwNDFkNjAzZmM6OTNBNDA3NkM1MUI5NDcyZjkyQjMwNTEzODAyNTdkMDU=</con:value>
    </con:property>
    <con:property>
      <con:name>id</con:name>
      <con:value>24659</con:value>
    </con:property>
    <con:property>
      <con:name>bookingReference</con:name>
      <con:value>85f50921-6c34-440a-844c-04a8d5ffd043</con:value>
    </con:property>
  </con:properties>
  <con:wssContainer/>
  <con:databaseConnectionContainer/>
  <con:jmsConnectionContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:reporting>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:authRepository/>
  <con:tags/>
  <con:sensitiveInformation/>
</con:soapui-project>
